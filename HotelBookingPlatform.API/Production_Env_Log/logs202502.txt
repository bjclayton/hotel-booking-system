2025-02-13 21:19:45.801 -05:00 [DBG] Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"]
2025-02-13 21:19:46.033 -05:00 [DBG] Hosting starting
2025-02-13 21:19:46.146 -05:00 [INF] User profile is available. Using 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-02-13 21:19:46.168 -05:00 [DBG] Reading data from file 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys\key-a85a9386-c5c5-4af5-8653-042df668f95b.xml'.
2025-02-13 21:19:46.246 -05:00 [DBG] Found key {a85a9386-c5c5-4af5-8653-042df668f95b}.
2025-02-13 21:19:46.287 -05:00 [DBG] Considering key {a85a9386-c5c5-4af5-8653-042df668f95b} with expiration date 2025-03-31 02:38:58Z as default key.
2025-02-13 21:19:46.297 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 21:19:46.303 -05:00 [DBG] Decrypting secret element using Windows DPAPI.
2025-02-13 21:19:46.307 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 21:19:46.324 -05:00 [DBG] Opening CNG algorithm 'AES' from provider 'null' with chaining mode CBC.
2025-02-13 21:19:46.340 -05:00 [DBG] Opening CNG algorithm 'SHA256' from provider 'null' with HMAC.
2025-02-13 21:19:46.350 -05:00 [DBG] Using key {a85a9386-c5c5-4af5-8653-042df668f95b} as the default key.
2025-02-13 21:19:46.354 -05:00 [DBG] Key ring with default key {a85a9386-c5c5-4af5-8653-042df668f95b} was loaded during application startup.
2025-02-13 21:19:46.796 -05:00 [INF] Now listening on: https://localhost:7294
2025-02-13 21:19:46.799 -05:00 [INF] Now listening on: http://localhost:5004
2025-02-13 21:19:46.801 -05:00 [DBG] Loaded hosting startup assembly HotelBookingPlatform.API
2025-02-13 21:19:46.802 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery
2025-02-13 21:19:46.803 -05:00 [DBG] Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh
2025-02-13 21:19:46.805 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net
2025-02-13 21:19:47.038 -05:00 [INF] Application started. Press Ctrl+C to shut down.
2025-02-13 21:19:47.099 -05:00 [INF] Hosting environment: Development
2025-02-13 21:19:47.078 -05:00 [DBG] Connection id "0HNACJO6N9GHK" received FIN.
2025-02-13 21:19:47.102 -05:00 [INF] Content root path: C:\Users\jclay\OneDrive\Desktop\Extra\Projects\point\HotelBookingPlatform\HotelBookingPlatform.API
2025-02-13 21:19:47.114 -05:00 [DBG] Connection id "0HNACJO6N9GHK" accepted.
2025-02-13 21:19:47.122 -05:00 [DBG] Hosting started
2025-02-13 21:19:47.125 -05:00 [DBG] Connection id "0HNACJO6N9GHK" started.
2025-02-13 21:19:47.172 -05:00 [DBG] Failed to authenticate HTTPS connection.
System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ProcessAuthenticationWithTelemetryAsync(Boolean isAsync, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-02-13 21:19:47.253 -05:00 [DBG] Connection id "0HNACJO6N9GHK" stopped.
2025-02-13 21:19:47.265 -05:00 [DBG] Connection id "0HNACJO6N9GHK" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 21:19:49.747 -05:00 [DBG] Connection id "0HNACJO6N9GHL" accepted.
2025-02-13 21:19:49.788 -05:00 [DBG] Connection id "0HNACJO6N9GHL" started.
2025-02-13 21:19:49.788 -05:00 [DBG] Connection id "0HNACJO6N9GHM" accepted.
2025-02-13 21:19:49.804 -05:00 [DBG] Connection id "0HNACJO6N9GHM" started.
2025-02-13 21:19:49.873 -05:00 [DBG] Connection id "0HNACJO6N9GHL" received FIN.
2025-02-13 21:19:49.898 -05:00 [DBG] Connection 0HNACJO6N9GHM established using the following protocol: "Tls13"
2025-02-13 21:19:49.898 -05:00 [DBG] Connection 0HNACJO6N9GHL established using the following protocol: "Tls13"
2025-02-13 21:19:49.941 -05:00 [DBG] Connection id "0HNACJO6N9GHL" is closed. The last processed stream ID was 0.
2025-02-13 21:19:49.951 -05:00 [DBG] Connection id "0HNACJO6N9GHL" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 21:19:49.957 -05:00 [DBG] The connection queue processing loop for 0HNACJO6N9GHL completed.
2025-02-13 21:19:49.966 -05:00 [DBG] Connection id "0HNACJO6N9GHL" stopped.
2025-02-13 21:19:50.040 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger - null null
2025-02-13 21:19:50.284 -05:00 [DBG] Wildcard detected, all requests with hosts will be allowed.
2025-02-13 21:19:50.335 -05:00 [DBG] No candidates found for the request path '/swagger'
2025-02-13 21:19:50.337 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:50.353 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger - 301 0 null 331.8189ms
2025-02-13 21:19:50.362 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.html - null null
2025-02-13 21:19:50.372 -05:00 [DBG] No candidates found for the request path '/swagger/index.html'
2025-02-13 21:19:50.373 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:50.473 -05:00 [DBG] Response markup is scheduled to include Browser Link script injection.
2025-02-13 21:19:50.477 -05:00 [DBG] Response markup is scheduled to include browser refresh script injection.
2025-02-13 21:19:50.489 -05:00 [DBG] Response markup was updated to include Browser Link script injection.
2025-02-13 21:19:50.490 -05:00 [DBG] Response markup was updated to include browser refresh script injection.
2025-02-13 21:19:50.499 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.html - 200 null text/html;charset=utf-8 137.4393ms
2025-02-13 21:19:50.546 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/swagger-ui.css - null null
2025-02-13 21:19:50.547 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.css - null null
2025-02-13 21:19:50.547 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/swagger-ui-bundle.js - null null
2025-02-13 21:19:50.547 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/swagger-ui-standalone-preset.js - null null
2025-02-13 21:19:50.551 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.js - null null
2025-02-13 21:19:50.584 -05:00 [DBG] No candidates found for the request path '/swagger/index.js'
2025-02-13 21:19:50.560 -05:00 [DBG] No candidates found for the request path '/swagger/index.css'
2025-02-13 21:19:50.567 -05:00 [DBG] No candidates found for the request path '/swagger/swagger-ui-bundle.js'
2025-02-13 21:19:50.571 -05:00 [DBG] No candidates found for the request path '/swagger/swagger-ui-standalone-preset.js'
2025-02-13 21:19:50.554 -05:00 [DBG] No candidates found for the request path '/swagger/swagger-ui.css'
2025-02-13 21:19:50.671 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:50.673 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:50.674 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:50.680 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:50.681 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:50.683 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.js - 200 null application/javascript;charset=utf-8 132.5505ms
2025-02-13 21:19:50.748 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - null null
2025-02-13 21:19:50.705 -05:00 [INF] Sending file. Request path: '/index.css'. Physical path: 'N/A'
2025-02-13 21:19:50.748 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_vs/browserLink - null null
2025-02-13 21:19:50.805 -05:00 [INF] Sending file. Request path: '/swagger-ui.css'. Physical path: 'N/A'
2025-02-13 21:19:50.774 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.css - 200 202 text/css 227.656ms
2025-02-13 21:19:50.816 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/swagger-ui.css - 200 152035 text/css 270.003ms
2025-02-13 21:19:50.793 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - 200 13800 application/javascript; charset=utf-8 45.5695ms
2025-02-13 21:19:50.812 -05:00 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2025-02-13 21:19:50.923 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/swagger-ui-standalone-preset.js - 200 230007 text/javascript 375.6547ms
2025-02-13 21:19:50.968 -05:00 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2025-02-13 21:19:50.978 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/swagger-ui-bundle.js - 200 1426050 text/javascript 431.5273ms
2025-02-13 21:19:51.016 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_vs/browserLink - 200 null text/javascript; charset=UTF-8 268.4472ms
2025-02-13 21:19:51.040 -05:00 [DBG] Connection id "0HNACJO6N9GHN" accepted.
2025-02-13 21:19:51.045 -05:00 [DBG] Connection id "0HNACJO6N9GHN" started.
2025-02-13 21:19:51.046 -05:00 [DBG] Connection id "0HNACJO6N9GHO" accepted.
2025-02-13 21:19:51.048 -05:00 [DBG] Connection id "0HNACJO6N9GHO" started.
2025-02-13 21:19:51.051 -05:00 [DBG] Connection id "0HNACJO6N9GHO" received FIN.
2025-02-13 21:19:51.052 -05:00 [DBG] Connection 0HNACJO6N9GHN established using the following protocol: "Tls13"
2025-02-13 21:19:51.056 -05:00 [DBG] Failed to authenticate HTTPS connection.
System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ProcessAuthenticationWithTelemetryAsync(Boolean isAsync, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-02-13 21:19:51.059 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.js - null null
2025-02-13 21:19:51.062 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/swagger-ui-standalone-preset.js - null null
2025-02-13 21:19:51.059 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - null null
2025-02-13 21:19:51.066 -05:00 [DBG] Connection id "0HNACJO6N9GHO" stopped.
2025-02-13 21:19:51.085 -05:00 [DBG] Connection id "0HNACJO6N9GHO" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 21:19:51.069 -05:00 [DBG] No candidates found for the request path '/swagger/index.js'
2025-02-13 21:19:51.073 -05:00 [DBG] No candidates found for the request path '/swagger/swagger-ui-standalone-preset.js'
2025-02-13 21:19:51.085 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - 200 13800 application/javascript; charset=utf-8 24.0881ms
2025-02-13 21:19:51.088 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/swagger-ui-bundle.js - null null
2025-02-13 21:19:51.089 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:51.091 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:51.098 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_vs/browserLink - null null
2025-02-13 21:19:51.103 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.js - 200 null application/javascript;charset=utf-8 44.05ms
2025-02-13 21:19:51.126 -05:00 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2025-02-13 21:19:51.101 -05:00 [DBG] No candidates found for the request path '/swagger/swagger-ui-bundle.js'
2025-02-13 21:19:51.189 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/swagger-ui-standalone-preset.js - 200 230007 text/javascript 127.0235ms
2025-02-13 21:19:51.198 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:51.212 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_vs/browserLink - 200 null text/javascript; charset=UTF-8 113.7869ms
2025-02-13 21:19:51.270 -05:00 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2025-02-13 21:19:51.273 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/swagger-ui-bundle.js - 200 1426050 text/javascript 185.2525ms
2025-02-13 21:19:51.713 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - null null
2025-02-13 21:19:51.718 -05:00 [DBG] No candidates found for the request path '/swagger/v1/swagger.json'
2025-02-13 21:19:51.720 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:51.754 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/favicon-32x32.png - null null
2025-02-13 21:19:51.766 -05:00 [DBG] No candidates found for the request path '/swagger/favicon-32x32.png'
2025-02-13 21:19:51.781 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:19:51.833 -05:00 [INF] Sending file. Request path: '/favicon-32x32.png'. Physical path: 'N/A'
2025-02-13 21:19:51.835 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/favicon-32x32.png - 200 628 image/png 81.3819ms
2025-02-13 21:19:51.901 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 188.5787ms
2025-02-13 21:23:51.412 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 112
2025-02-13 21:23:51.437 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 21:23:51.447 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 21:23:51.450 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 21:23:51.453 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 21:23:51.455 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 21:23:51.590 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 21:23:51.597 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 21:23:51.637 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 21:23:51.641 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 21:23:51.644 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 21:23:51.647 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 21:23:51.650 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 21:23:51.652 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 21:23:51.656 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 21:23:52.602 -05:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-02-13 21:23:52.655 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 21:23:52.683 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 21:23:52.687 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' using the name '' in request data ...
2025-02-13 21:23:52.690 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 21:23:52.703 -05:00 [DBG] Connection id "0HNACJO6N9GHM", Request id "0HNACJO6N9GHM:00000017": started reading request body.
2025-02-13 21:23:52.705 -05:00 [DBG] Connection id "0HNACJO6N9GHM", Request id "0HNACJO6N9GHM:00000017": done reading request body.
2025-02-13 21:23:52.754 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'
2025-02-13 21:23:52.756 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 21:23:52.757 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 21:23:52.762 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 21:23:52.773 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 21:23:54.398 -05:00 [DBG] The index {'BookingID'} was not created on entity type 'BookingRoom (Dictionary<string, object>)' as the properties are already covered by the index {'BookingID', 'RoomID'}.
2025-02-13 21:23:54.403 -05:00 [DBG] The index {'LocalUserId'} was not created on entity type 'RefreshToken' as the properties are already covered by the index {'LocalUserId', 'Id'}.
2025-02-13 21:23:54.410 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserRole<string>' as the properties are already covered by the index {'UserId', 'RoleId'}.
2025-02-13 21:23:54.412 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserToken<string>' as the properties are already covered by the index {'UserId', 'LoginProvider', 'Name'}.
2025-02-13 21:23:54.414 -05:00 [DBG] The index {'AmenityID'} was not created on entity type 'RoomClassAmenity (Dictionary<string, object>)' as the properties are already covered by the index {'AmenityID', 'RoomClassID'}.
2025-02-13 21:23:54.617 -05:00 [DBG] The property 'Discount.RoomClassID' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:23:54.619 -05:00 [DBG] The property 'RefreshToken.LocalUserId' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:23:54.621 -05:00 [DBG] The property 'RefreshToken.Id' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:23:54.887 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 21:23:55.075 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .SingleOrDefault(u => u.NormalizedEmail == __normalizedEmail_0)'
2025-02-13 21:23:55.494 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 21:23:56.492 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 21:23:56.594 -05:00 [DBG] Creating DbConnection.
2025-02-13 21:23:56.642 -05:00 [DBG] Created DbConnection. (44ms).
2025-02-13 21:23:56.647 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:24:00.770 -05:00 [ERR] An error occurred using the connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:24:00.796 -05:00 [ERR] An exception occurred while iterating over the results of a query for context type 'HotelBookingPlatform.Infrastructure.Data.AppDbContext'.
System.InvalidOperationException: An exception has been raised that is likely due to a transient failure.
 ---> Npgsql.NpgsqlException (0x80004005): Failed to connect to 127.0.0.1:5432
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)
   at Npgsql.TaskTimeoutAndCancellation.ExecuteAsync(Func`2 getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.RawOpen(SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.<Open>g__OpenCore|214_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.Open(NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.<Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlConnection.<Open>g__OpenAsync|42_0(Boolean async, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
System.InvalidOperationException: An exception has been raised that is likely due to a transient failure.
 ---> Npgsql.NpgsqlException (0x80004005): Failed to connect to 127.0.0.1:5432
 ---> System.Net.Sockets.SocketException (10061): No connection could be made because the target machine actively refused it.
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error, CancellationToken cancellationToken)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.System.Threading.Tasks.Sources.IValueTaskSource.GetResult(Int16 token)
   at System.Net.Sockets.Socket.<ConnectAsync>g__WaitForConnectWithCancellation|285_0(AwaitableSocketAsyncEventArgs saea, ValueTask connectTask, CancellationToken cancellationToken)
   at Npgsql.TaskTimeoutAndCancellation.ExecuteAsync(Func`2 getTaskFunc, NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.ConnectAsync(NpgsqlTimeout timeout, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.RawOpen(SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.<Open>g__OpenCore|214_1(NpgsqlConnector conn, SslMode sslMode, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.Internal.NpgsqlConnector.Open(NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.OpenNewConnector(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.PoolingDataSource.<Get>g__RentAsync|33_0(NpgsqlConnection conn, NpgsqlTimeout timeout, Boolean async, CancellationToken cancellationToken)
   at Npgsql.NpgsqlConnection.<Open>g__OpenAsync|42_0(Boolean async, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternalAsync(Boolean errorsExpected, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(CancellationToken cancellationToken, Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(RelationalCommandParameterObject parameterObject, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.InitializeReaderAsync(AsyncEnumerator enumerator, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
2025-02-13 21:24:01.128 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 9470.8692ms
2025-02-13 21:24:01.132 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 21:24:01.398 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 21:24:01.409 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:24:01.432 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (5ms).
2025-02-13 21:24:01.438 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 500 null application/json 10026.3359ms
2025-02-13 21:36:59.573 -05:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-02-13 21:37:00.725 -05:00 [DBG] The index {'BookingID'} was not created on entity type 'BookingRoom (Dictionary<string, object>)' as the properties are already covered by the index {'BookingID', 'RoomID'}.
2025-02-13 21:37:00.736 -05:00 [DBG] The index {'LocalUserId'} was not created on entity type 'RefreshToken' as the properties are already covered by the index {'LocalUserId', 'Id'}.
2025-02-13 21:37:00.739 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserRole<string>' as the properties are already covered by the index {'UserId', 'RoleId'}.
2025-02-13 21:37:00.743 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserToken<string>' as the properties are already covered by the index {'UserId', 'LoginProvider', 'Name'}.
2025-02-13 21:37:00.756 -05:00 [DBG] The index {'AmenityID'} was not created on entity type 'RoomClassAmenity (Dictionary<string, object>)' as the properties are already covered by the index {'AmenityID', 'RoomClassID'}.
2025-02-13 21:37:00.974 -05:00 [DBG] The property 'Discount.RoomClassID' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:37:00.976 -05:00 [DBG] The property 'RefreshToken.LocalUserId' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:37:00.978 -05:00 [DBG] The property 'RefreshToken.Id' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:37:01.116 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 21:37:02.525 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 21:38:21.810 -05:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-02-13 21:38:23.868 -05:00 [DBG] The index {'BookingID'} was not created on entity type 'BookingRoom (Dictionary<string, object>)' as the properties are already covered by the index {'BookingID', 'RoomID'}.
2025-02-13 21:38:23.882 -05:00 [DBG] The index {'LocalUserId'} was not created on entity type 'RefreshToken' as the properties are already covered by the index {'LocalUserId', 'Id'}.
2025-02-13 21:38:23.894 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserRole<string>' as the properties are already covered by the index {'UserId', 'RoleId'}.
2025-02-13 21:38:23.908 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserToken<string>' as the properties are already covered by the index {'UserId', 'LoginProvider', 'Name'}.
2025-02-13 21:38:23.912 -05:00 [DBG] The index {'AmenityID'} was not created on entity type 'RoomClassAmenity (Dictionary<string, object>)' as the properties are already covered by the index {'AmenityID', 'RoomClassID'}.
2025-02-13 21:38:24.257 -05:00 [DBG] The property 'Discount.RoomClassID' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:38:24.261 -05:00 [DBG] The property 'RefreshToken.LocalUserId' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:38:24.263 -05:00 [DBG] The property 'RefreshToken.Id' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:38:24.535 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 21:38:24.595 -05:00 [DBG] Creating DbConnection.
2025-02-13 21:38:24.690 -05:00 [DBG] Created DbConnection. (89ms).
2025-02-13 21:38:24.697 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.024 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.035 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 21:38:25.047 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (13ms).
2025-02-13 21:38:25.056 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (27ms).
2025-02-13 21:38:25.073 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-02-13 21:38:25.137 -05:00 [ERR] Failed executing DbCommand (64ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-02-13 21:38:25.144 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.163 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (13ms).
2025-02-13 21:38:25.538 -05:00 [DBG] Migrating using database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.545 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.563 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.618 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.624 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.633 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (9ms).
2025-02-13 21:38:25.642 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.646 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.742 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:25.743 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:25.745 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:25.763 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);
2025-02-13 21:38:25.796 -05:00 [INF] Executed DbCommand (33ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
    "MigrationId" character varying(150) NOT NULL,
    "ProductVersion" character varying(32) NOT NULL,
    CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
);
2025-02-13 21:38:25.808 -05:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-02-13 21:38:25.816 -05:00 [DBG] Began transaction with isolation level 'ReadCommitted'.
2025-02-13 21:38:25.833 -05:00 [INF] Acquiring an exclusive lock for migration application. See https://aka.ms/efcore-docs-migrations-lock for more information if this takes too long.
2025-02-13 21:38:25.837 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:25.839 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:25.842 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:25.844 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
LOCK TABLE "__EFMigrationsHistory" IN ACCESS EXCLUSIVE MODE
2025-02-13 21:38:25.857 -05:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
LOCK TABLE "__EFMigrationsHistory" IN ACCESS EXCLUSIVE MODE
2025-02-13 21:38:25.861 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 21:38:25.863 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 21:38:25.868 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (6ms).
2025-02-13 21:38:25.871 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-02-13 21:38:25.878 -05:00 [INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT "MigrationId", "ProductVersion"
FROM "__EFMigrationsHistory"
ORDER BY "MigrationId";
2025-02-13 21:38:25.892 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:25.898 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 7ms reading results.
2025-02-13 21:38:25.912 -05:00 [INF] Applying migration '20250214023702_InitialCreate'.
2025-02-13 21:38:26.034 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.037 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.038 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:26.041 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetRoles" (
    "Id" text NOT NULL,
    "Name" character varying(256),
    "NormalizedName" character varying(256),
    "ConcurrencyStamp" text,
    CONSTRAINT "PK_AspNetRoles" PRIMARY KEY ("Id")
);
2025-02-13 21:38:26.065 -05:00 [INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetRoles" (
    "Id" text NOT NULL,
    "Name" character varying(256),
    "NormalizedName" character varying(256),
    "ConcurrencyStamp" text,
    CONSTRAINT "PK_AspNetRoles" PRIMARY KEY ("Id")
);
2025-02-13 21:38:26.071 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.073 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.074 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.077 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUsers" (
    "Id" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "UserName" character varying(256),
    "NormalizedUserName" character varying(256),
    "Email" character varying(256),
    "NormalizedEmail" character varying(256),
    "EmailConfirmed" boolean NOT NULL,
    "PasswordHash" text,
    "SecurityStamp" text,
    "ConcurrencyStamp" text,
    "PhoneNumber" text,
    "PhoneNumberConfirmed" boolean NOT NULL,
    "TwoFactorEnabled" boolean NOT NULL,
    "LockoutEnd" timestamp with time zone,
    "LockoutEnabled" boolean NOT NULL,
    "AccessFailedCount" integer NOT NULL,
    CONSTRAINT "PK_AspNetUsers" PRIMARY KEY ("Id")
);
2025-02-13 21:38:26.106 -05:00 [INF] Executed DbCommand (29ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUsers" (
    "Id" text NOT NULL,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "UserName" character varying(256),
    "NormalizedUserName" character varying(256),
    "Email" character varying(256),
    "NormalizedEmail" character varying(256),
    "EmailConfirmed" boolean NOT NULL,
    "PasswordHash" text,
    "SecurityStamp" text,
    "ConcurrencyStamp" text,
    "PhoneNumber" text,
    "PhoneNumberConfirmed" boolean NOT NULL,
    "TwoFactorEnabled" boolean NOT NULL,
    "LockoutEnd" timestamp with time zone,
    "LockoutEnabled" boolean NOT NULL,
    "AccessFailedCount" integer NOT NULL,
    CONSTRAINT "PK_AspNetUsers" PRIMARY KEY ("Id")
);
2025-02-13 21:38:26.112 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.119 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (6ms).
2025-02-13 21:38:26.122 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (10ms).
2025-02-13 21:38:26.125 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Cities" (
    "CityID" integer GENERATED BY DEFAULT AS IDENTITY,
    "Description" text NOT NULL,
    "Name" text NOT NULL,
    "Country" text NOT NULL,
    "PostOffice" text NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "VisitCount" integer NOT NULL,
    CONSTRAINT "PK_Cities" PRIMARY KEY ("CityID")
);
2025-02-13 21:38:26.142 -05:00 [INF] Executed DbCommand (18ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Cities" (
    "CityID" integer GENERATED BY DEFAULT AS IDENTITY,
    "Description" text NOT NULL,
    "Name" text NOT NULL,
    "Country" text NOT NULL,
    "PostOffice" text NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "VisitCount" integer NOT NULL,
    CONSTRAINT "PK_Cities" PRIMARY KEY ("CityID")
);
2025-02-13 21:38:26.146 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.154 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (8ms).
2025-02-13 21:38:26.156 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (10ms).
2025-02-13 21:38:26.158 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Images" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "PublicId" text NOT NULL,
    "Url" text NOT NULL,
    "Type" text NOT NULL,
    "EntityId" integer NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "HotelId" integer,
    "RoomClassId" integer,
    "RoomId" integer,
    "CityId" integer,
    CONSTRAINT "PK_Images" PRIMARY KEY ("Id")
);
2025-02-13 21:38:26.182 -05:00 [INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Images" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "PublicId" text NOT NULL,
    "Url" text NOT NULL,
    "Type" text NOT NULL,
    "EntityId" integer NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    "HotelId" integer,
    "RoomClassId" integer,
    "RoomId" integer,
    "CityId" integer,
    CONSTRAINT "PK_Images" PRIMARY KEY ("Id")
);
2025-02-13 21:38:26.192 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.195 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.209 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (17ms).
2025-02-13 21:38:26.212 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE owners (
    "OwnerID" integer GENERATED BY DEFAULT AS IDENTITY,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Email" text NOT NULL,
    "PhoneNumber" text NOT NULL,
    CONSTRAINT "PK_owners" PRIMARY KEY ("OwnerID")
);
2025-02-13 21:38:26.265 -05:00 [INF] Executed DbCommand (53ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE owners (
    "OwnerID" integer GENERATED BY DEFAULT AS IDENTITY,
    "FirstName" text NOT NULL,
    "LastName" text NOT NULL,
    "Email" text NOT NULL,
    "PhoneNumber" text NOT NULL,
    CONSTRAINT "PK_owners" PRIMARY KEY ("OwnerID")
);
2025-02-13 21:38:26.275 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.277 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.288 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (13ms).
2025-02-13 21:38:26.291 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetRoleClaims" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoleId" text NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_AspNetRoleClaims" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_AspNetRoleClaims_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "AspNetRoles" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.315 -05:00 [INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetRoleClaims" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoleId" text NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_AspNetRoleClaims" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_AspNetRoleClaims_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "AspNetRoles" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.323 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.325 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.327 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:26.329 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUserClaims" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "UserId" text NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_AspNetUserClaims" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_AspNetUserClaims_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.357 -05:00 [INF] Executed DbCommand (28ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUserClaims" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "UserId" text NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_AspNetUserClaims" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_AspNetUserClaims_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.361 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.362 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.373 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (11ms).
2025-02-13 21:38:26.375 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUserLogins" (
    "LoginProvider" text NOT NULL,
    "ProviderKey" text NOT NULL,
    "ProviderDisplayName" text,
    "UserId" text NOT NULL,
    CONSTRAINT "PK_AspNetUserLogins" PRIMARY KEY ("LoginProvider", "ProviderKey"),
    CONSTRAINT "FK_AspNetUserLogins_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.394 -05:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUserLogins" (
    "LoginProvider" text NOT NULL,
    "ProviderKey" text NOT NULL,
    "ProviderDisplayName" text,
    "UserId" text NOT NULL,
    CONSTRAINT "PK_AspNetUserLogins" PRIMARY KEY ("LoginProvider", "ProviderKey"),
    CONSTRAINT "FK_AspNetUserLogins_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.402 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.405 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.406 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:26.408 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUserRoles" (
    "UserId" text NOT NULL,
    "RoleId" text NOT NULL,
    CONSTRAINT "PK_AspNetUserRoles" PRIMARY KEY ("UserId", "RoleId"),
    CONSTRAINT "FK_AspNetUserRoles_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "AspNetRoles" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_AspNetUserRoles_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.429 -05:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUserRoles" (
    "UserId" text NOT NULL,
    "RoleId" text NOT NULL,
    CONSTRAINT "PK_AspNetUserRoles" PRIMARY KEY ("UserId", "RoleId"),
    CONSTRAINT "FK_AspNetUserRoles_AspNetRoles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "AspNetRoles" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_AspNetUserRoles_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.437 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.439 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.442 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:26.444 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUserTokens" (
    "UserId" text NOT NULL,
    "LoginProvider" text NOT NULL,
    "Name" text NOT NULL,
    "Value" text,
    CONSTRAINT "PK_AspNetUserTokens" PRIMARY KEY ("UserId", "LoginProvider", "Name"),
    CONSTRAINT "FK_AspNetUserTokens_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.467 -05:00 [INF] Executed DbCommand (23ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "AspNetUserTokens" (
    "UserId" text NOT NULL,
    "LoginProvider" text NOT NULL,
    "Name" text NOT NULL,
    "Value" text,
    CONSTRAINT "PK_AspNetUserTokens" PRIMARY KEY ("UserId", "LoginProvider", "Name"),
    CONSTRAINT "FK_AspNetUserTokens_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.472 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.473 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.475 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.477 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "RefreshToken" (
    "LocalUserId" text NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Token" text NOT NULL,
    "ExpiresOn" timestamp with time zone NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "RevokedOn" timestamp with time zone,
    CONSTRAINT "PK_RefreshToken" PRIMARY KEY ("LocalUserId", "Id"),
    CONSTRAINT "FK_RefreshToken_AspNetUsers_LocalUserId" FOREIGN KEY ("LocalUserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.496 -05:00 [INF] Executed DbCommand (19ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "RefreshToken" (
    "LocalUserId" text NOT NULL,
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "Token" text NOT NULL,
    "ExpiresOn" timestamp with time zone NOT NULL,
    "CreatedOn" timestamp with time zone NOT NULL,
    "RevokedOn" timestamp with time zone,
    CONSTRAINT "PK_RefreshToken" PRIMARY KEY ("LocalUserId", "Id"),
    CONSTRAINT "FK_RefreshToken_AspNetUsers_LocalUserId" FOREIGN KEY ("LocalUserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE
);
2025-02-13 21:38:26.504 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.505 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.506 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.508 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Hotels" (
    "HotelId" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" character varying(100) NOT NULL,
    "StarRating" integer NOT NULL,
    "Description" character varying(500),
    "PhoneNumber" character varying(15) NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "CityID" integer NOT NULL,
    "OwnerID" integer NOT NULL,
    CONSTRAINT "PK_Hotels" PRIMARY KEY ("HotelId"),
    CONSTRAINT "FK_Hotels_Cities_CityID" FOREIGN KEY ("CityID") REFERENCES "Cities" ("CityID") ON DELETE CASCADE,
    CONSTRAINT "FK_Hotels_owners_OwnerID" FOREIGN KEY ("OwnerID") REFERENCES owners ("OwnerID") ON DELETE CASCADE
);
2025-02-13 21:38:26.532 -05:00 [INF] Executed DbCommand (24ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Hotels" (
    "HotelId" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" character varying(100) NOT NULL,
    "StarRating" integer NOT NULL,
    "Description" character varying(500),
    "PhoneNumber" character varying(15) NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "CityID" integer NOT NULL,
    "OwnerID" integer NOT NULL,
    CONSTRAINT "PK_Hotels" PRIMARY KEY ("HotelId"),
    CONSTRAINT "FK_Hotels_Cities_CityID" FOREIGN KEY ("CityID") REFERENCES "Cities" ("CityID") ON DELETE CASCADE,
    CONSTRAINT "FK_Hotels_owners_OwnerID" FOREIGN KEY ("OwnerID") REFERENCES owners ("OwnerID") ON DELETE CASCADE
);
2025-02-13 21:38:26.539 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.540 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.541 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.543 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Amenities" (
    "AmenityID" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Description" text NOT NULL,
    "HotelId" integer NOT NULL,
    CONSTRAINT "PK_Amenities" PRIMARY KEY ("AmenityID"),
    CONSTRAINT "FK_Amenities_Hotels_HotelId" FOREIGN KEY ("HotelId") REFERENCES "Hotels" ("HotelId") ON DELETE CASCADE
);
2025-02-13 21:38:26.566 -05:00 [INF] Executed DbCommand (23ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Amenities" (
    "AmenityID" integer GENERATED BY DEFAULT AS IDENTITY,
    "Name" text NOT NULL,
    "Description" text NOT NULL,
    "HotelId" integer NOT NULL,
    CONSTRAINT "PK_Amenities" PRIMARY KEY ("AmenityID"),
    CONSTRAINT "FK_Amenities_Hotels_HotelId" FOREIGN KEY ("HotelId") REFERENCES "Hotels" ("HotelId") ON DELETE CASCADE
);
2025-02-13 21:38:26.569 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.571 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.573 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.574 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Bookings" (
    "BookingID" integer GENERATED BY DEFAULT AS IDENTITY,
    "UserId" text NOT NULL,
    "Status" integer NOT NULL,
    "ConfirmationNumber" character varying(50) NOT NULL,
    "TotalPrice" numeric(18,2) NOT NULL,
    "AfterDiscountedPrice" numeric NOT NULL,
    "BookingDateUtc" timestamp with time zone NOT NULL,
    "PaymentMethod" integer NOT NULL,
    "HotelId" integer NOT NULL,
    "CheckInDateUtc" timestamp with time zone NOT NULL,
    "CheckOutDateUtc" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Bookings" PRIMARY KEY ("BookingID"),
    CONSTRAINT "FK_Bookings_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_Bookings_Hotels_HotelId" FOREIGN KEY ("HotelId") REFERENCES "Hotels" ("HotelId") ON DELETE CASCADE
);
2025-02-13 21:38:26.598 -05:00 [INF] Executed DbCommand (23ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Bookings" (
    "BookingID" integer GENERATED BY DEFAULT AS IDENTITY,
    "UserId" text NOT NULL,
    "Status" integer NOT NULL,
    "ConfirmationNumber" character varying(50) NOT NULL,
    "TotalPrice" numeric(18,2) NOT NULL,
    "AfterDiscountedPrice" numeric NOT NULL,
    "BookingDateUtc" timestamp with time zone NOT NULL,
    "PaymentMethod" integer NOT NULL,
    "HotelId" integer NOT NULL,
    "CheckInDateUtc" timestamp with time zone NOT NULL,
    "CheckOutDateUtc" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Bookings" PRIMARY KEY ("BookingID"),
    CONSTRAINT "FK_Bookings_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_Bookings_Hotels_HotelId" FOREIGN KEY ("HotelId") REFERENCES "Hotels" ("HotelId") ON DELETE CASCADE
);
2025-02-13 21:38:26.607 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.609 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.611 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:26.618 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Reviews" (
    "ReviewID" integer GENERATED BY DEFAULT AS IDENTITY,
    "HotelId" integer NOT NULL,
    "Content" text NOT NULL,
    "Rating" integer NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "ModifiedAtUtc" timestamp with time zone,
    "UserId" text NOT NULL,
    CONSTRAINT "PK_Reviews" PRIMARY KEY ("ReviewID"),
    CONSTRAINT "FK_Reviews_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_Reviews_Hotels_HotelId" FOREIGN KEY ("HotelId") REFERENCES "Hotels" ("HotelId") ON DELETE RESTRICT
);
2025-02-13 21:38:26.642 -05:00 [INF] Executed DbCommand (25ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Reviews" (
    "ReviewID" integer GENERATED BY DEFAULT AS IDENTITY,
    "HotelId" integer NOT NULL,
    "Content" text NOT NULL,
    "Rating" integer NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "ModifiedAtUtc" timestamp with time zone,
    "UserId" text NOT NULL,
    CONSTRAINT "PK_Reviews" PRIMARY KEY ("ReviewID"),
    CONSTRAINT "FK_Reviews_AspNetUsers_UserId" FOREIGN KEY ("UserId") REFERENCES "AspNetUsers" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_Reviews_Hotels_HotelId" FOREIGN KEY ("HotelId") REFERENCES "Hotels" ("HotelId") ON DELETE RESTRICT
);
2025-02-13 21:38:26.654 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.657 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.660 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (5ms).
2025-02-13 21:38:26.662 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "RoomClasses" (
    "RoomClassID" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoomType" integer NOT NULL,
    "Name" text NOT NULL,
    "Description" character varying(500),
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "HotelId" integer NOT NULL,
    CONSTRAINT "PK_RoomClasses" PRIMARY KEY ("RoomClassID"),
    CONSTRAINT "FK_RoomClasses_Hotels_HotelId" FOREIGN KEY ("HotelId") REFERENCES "Hotels" ("HotelId") ON DELETE CASCADE
);
2025-02-13 21:38:26.692 -05:00 [INF] Executed DbCommand (30ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "RoomClasses" (
    "RoomClassID" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoomType" integer NOT NULL,
    "Name" text NOT NULL,
    "Description" character varying(500),
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "HotelId" integer NOT NULL,
    CONSTRAINT "PK_RoomClasses" PRIMARY KEY ("RoomClassID"),
    CONSTRAINT "FK_RoomClasses_Hotels_HotelId" FOREIGN KEY ("HotelId") REFERENCES "Hotels" ("HotelId") ON DELETE CASCADE
);
2025-02-13 21:38:26.698 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.700 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.701 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.703 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "InvoiceRecords" (
    "InvoiceRecordId" integer GENERATED BY DEFAULT AS IDENTITY,
    "BookingID" integer NOT NULL,
    "RoomID" integer NOT NULL,
    "RoomClassName" text NOT NULL,
    "RoomNumber" text NOT NULL,
    "PriceAtBooking" numeric NOT NULL,
    "DiscountPercentageAtBooking" numeric,
    CONSTRAINT "PK_InvoiceRecords" PRIMARY KEY ("InvoiceRecordId"),
    CONSTRAINT "FK_InvoiceRecords_Bookings_BookingID" FOREIGN KEY ("BookingID") REFERENCES "Bookings" ("BookingID") ON DELETE CASCADE
);
2025-02-13 21:38:26.718 -05:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "InvoiceRecords" (
    "InvoiceRecordId" integer GENERATED BY DEFAULT AS IDENTITY,
    "BookingID" integer NOT NULL,
    "RoomID" integer NOT NULL,
    "RoomClassName" text NOT NULL,
    "RoomNumber" text NOT NULL,
    "PriceAtBooking" numeric NOT NULL,
    "DiscountPercentageAtBooking" numeric,
    CONSTRAINT "PK_InvoiceRecords" PRIMARY KEY ("InvoiceRecordId"),
    CONSTRAINT "FK_InvoiceRecords_Bookings_BookingID" FOREIGN KEY ("BookingID") REFERENCES "Bookings" ("BookingID") ON DELETE CASCADE
);
2025-02-13 21:38:26.721 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.724 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.725 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:26.727 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "RoomClassAmenity" (
    "AmenityID" integer NOT NULL,
    "RoomClassID" integer NOT NULL,
    CONSTRAINT "PK_RoomClassAmenity" PRIMARY KEY ("AmenityID", "RoomClassID"),
    CONSTRAINT "FK_RoomClassAmenity_Amenities_AmenityID" FOREIGN KEY ("AmenityID") REFERENCES "Amenities" ("AmenityID") ON DELETE CASCADE,
    CONSTRAINT "FK_RoomClassAmenity_RoomClasses_RoomClassID" FOREIGN KEY ("RoomClassID") REFERENCES "RoomClasses" ("RoomClassID") ON DELETE CASCADE
);
2025-02-13 21:38:26.739 -05:00 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "RoomClassAmenity" (
    "AmenityID" integer NOT NULL,
    "RoomClassID" integer NOT NULL,
    CONSTRAINT "PK_RoomClassAmenity" PRIMARY KEY ("AmenityID", "RoomClassID"),
    CONSTRAINT "FK_RoomClassAmenity_Amenities_AmenityID" FOREIGN KEY ("AmenityID") REFERENCES "Amenities" ("AmenityID") ON DELETE CASCADE,
    CONSTRAINT "FK_RoomClassAmenity_RoomClasses_RoomClassID" FOREIGN KEY ("RoomClassID") REFERENCES "RoomClasses" ("RoomClassID") ON DELETE CASCADE
);
2025-02-13 21:38:26.743 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.744 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.750 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (6ms).
2025-02-13 21:38:26.752 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Rooms" (
    "RoomID" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoomClassID" integer NOT NULL,
    "Number" character varying(50) NOT NULL,
    "AdultsCapacity" integer NOT NULL,
    "ChildrenCapacity" integer NOT NULL,
    "PricePerNight" numeric(18,2) NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Rooms" PRIMARY KEY ("RoomID"),
    CONSTRAINT "FK_Rooms_RoomClasses_RoomClassID" FOREIGN KEY ("RoomClassID") REFERENCES "RoomClasses" ("RoomClassID") ON DELETE CASCADE
);
2025-02-13 21:38:26.764 -05:00 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Rooms" (
    "RoomID" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoomClassID" integer NOT NULL,
    "Number" character varying(50) NOT NULL,
    "AdultsCapacity" integer NOT NULL,
    "ChildrenCapacity" integer NOT NULL,
    "PricePerNight" numeric(18,2) NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_Rooms" PRIMARY KEY ("RoomID"),
    CONSTRAINT "FK_Rooms_RoomClasses_RoomClassID" FOREIGN KEY ("RoomClassID") REFERENCES "RoomClasses" ("RoomClassID") ON DELETE CASCADE
);
2025-02-13 21:38:26.768 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.769 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.771 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.773 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "BookingRoom" (
    "BookingID" integer NOT NULL,
    "RoomID" integer NOT NULL,
    CONSTRAINT "PK_BookingRoom" PRIMARY KEY ("BookingID", "RoomID"),
    CONSTRAINT "FK_BookingRoom_Bookings_BookingID" FOREIGN KEY ("BookingID") REFERENCES "Bookings" ("BookingID") ON DELETE CASCADE,
    CONSTRAINT "FK_BookingRoom_Rooms_RoomID" FOREIGN KEY ("RoomID") REFERENCES "Rooms" ("RoomID") ON DELETE CASCADE
);
2025-02-13 21:38:26.789 -05:00 [INF] Executed DbCommand (15ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "BookingRoom" (
    "BookingID" integer NOT NULL,
    "RoomID" integer NOT NULL,
    CONSTRAINT "PK_BookingRoom" PRIMARY KEY ("BookingID", "RoomID"),
    CONSTRAINT "FK_BookingRoom_Bookings_BookingID" FOREIGN KEY ("BookingID") REFERENCES "Bookings" ("BookingID") ON DELETE CASCADE,
    CONSTRAINT "FK_BookingRoom_Rooms_RoomID" FOREIGN KEY ("RoomID") REFERENCES "Rooms" ("RoomID") ON DELETE CASCADE
);
2025-02-13 21:38:26.793 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.795 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.802 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (9ms).
2025-02-13 21:38:26.805 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Discounts" (
    "DiscountID" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoomID" integer NOT NULL,
    "Percentage" numeric(5,2) NOT NULL,
    "StartDateUtc" timestamp with time zone NOT NULL,
    "EndDateUtc" timestamp with time zone NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "IsActive" boolean NOT NULL,
    "RoomClassID" integer,
    CONSTRAINT "PK_Discounts" PRIMARY KEY ("DiscountID"),
    CONSTRAINT "FK_Discounts_RoomClasses_RoomClassID" FOREIGN KEY ("RoomClassID") REFERENCES "RoomClasses" ("RoomClassID"),
    CONSTRAINT "FK_Discounts_Rooms_RoomID" FOREIGN KEY ("RoomID") REFERENCES "Rooms" ("RoomID") ON DELETE CASCADE
);
2025-02-13 21:38:26.821 -05:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE "Discounts" (
    "DiscountID" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoomID" integer NOT NULL,
    "Percentage" numeric(5,2) NOT NULL,
    "StartDateUtc" timestamp with time zone NOT NULL,
    "EndDateUtc" timestamp with time zone NOT NULL,
    "CreatedAtUtc" timestamp with time zone NOT NULL,
    "IsActive" boolean NOT NULL,
    "RoomClassID" integer,
    CONSTRAINT "PK_Discounts" PRIMARY KEY ("DiscountID"),
    CONSTRAINT "FK_Discounts_RoomClasses_RoomClassID" FOREIGN KEY ("RoomClassID") REFERENCES "RoomClasses" ("RoomClassID"),
    CONSTRAINT "FK_Discounts_Rooms_RoomID" FOREIGN KEY ("RoomID") REFERENCES "Rooms" ("RoomID") ON DELETE CASCADE
);
2025-02-13 21:38:26.825 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.826 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.828 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.835 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Amenities_HotelId" ON "Amenities" ("HotelId");
2025-02-13 21:38:26.844 -05:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Amenities_HotelId" ON "Amenities" ("HotelId");
2025-02-13 21:38:26.851 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.853 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:26.856 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (5ms).
2025-02-13 21:38:26.859 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_AspNetRoleClaims_RoleId" ON "AspNetRoleClaims" ("RoleId");
2025-02-13 21:38:26.875 -05:00 [INF] Executed DbCommand (16ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_AspNetRoleClaims_RoleId" ON "AspNetRoleClaims" ("RoleId");
2025-02-13 21:38:26.877 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.878 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.890 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (12ms).
2025-02-13 21:38:26.892 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE UNIQUE INDEX "RoleNameIndex" ON "AspNetRoles" ("NormalizedName");
2025-02-13 21:38:26.905 -05:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE UNIQUE INDEX "RoleNameIndex" ON "AspNetRoles" ("NormalizedName");
2025-02-13 21:38:26.907 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.909 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.911 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.921 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_AspNetUserClaims_UserId" ON "AspNetUserClaims" ("UserId");
2025-02-13 21:38:26.928 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_AspNetUserClaims_UserId" ON "AspNetUserClaims" ("UserId");
2025-02-13 21:38:26.934 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.935 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.937 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.939 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_AspNetUserLogins_UserId" ON "AspNetUserLogins" ("UserId");
2025-02-13 21:38:26.948 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_AspNetUserLogins_UserId" ON "AspNetUserLogins" ("UserId");
2025-02-13 21:38:26.951 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.953 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.955 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.956 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_AspNetUserRoles_RoleId" ON "AspNetUserRoles" ("RoleId");
2025-02-13 21:38:26.968 -05:00 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_AspNetUserRoles_RoleId" ON "AspNetUserRoles" ("RoleId");
2025-02-13 21:38:26.971 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.972 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.975 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:26.976 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "EmailIndex" ON "AspNetUsers" ("NormalizedEmail");
2025-02-13 21:38:26.990 -05:00 [INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "EmailIndex" ON "AspNetUsers" ("NormalizedEmail");
2025-02-13 21:38:26.993 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:26.994 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:26.998 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:27.000 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE UNIQUE INDEX "UserNameIndex" ON "AspNetUsers" ("NormalizedUserName");
2025-02-13 21:38:27.009 -05:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE UNIQUE INDEX "UserNameIndex" ON "AspNetUsers" ("NormalizedUserName");
2025-02-13 21:38:27.012 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.015 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:27.018 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (6ms).
2025-02-13 21:38:27.020 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_BookingRoom_RoomID" ON "BookingRoom" ("RoomID");
2025-02-13 21:38:27.028 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_BookingRoom_RoomID" ON "BookingRoom" ("RoomID");
2025-02-13 21:38:27.033 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.034 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.036 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:27.038 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE UNIQUE INDEX "IX_Bookings_ConfirmationNumber" ON "Bookings" ("ConfirmationNumber");
2025-02-13 21:38:27.045 -05:00 [INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE UNIQUE INDEX "IX_Bookings_ConfirmationNumber" ON "Bookings" ("ConfirmationNumber");
2025-02-13 21:38:27.053 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.054 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.056 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:27.058 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Bookings_HotelId" ON "Bookings" ("HotelId");
2025-02-13 21:38:27.068 -05:00 [INF] Executed DbCommand (10ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Bookings_HotelId" ON "Bookings" ("HotelId");
2025-02-13 21:38:27.071 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.073 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.075 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:27.076 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Bookings_UserId" ON "Bookings" ("UserId");
2025-02-13 21:38:27.089 -05:00 [INF] Executed DbCommand (13ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Bookings_UserId" ON "Bookings" ("UserId");
2025-02-13 21:38:27.092 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.093 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.096 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:27.099 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Discounts_RoomClassID" ON "Discounts" ("RoomClassID");
2025-02-13 21:38:27.109 -05:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Discounts_RoomClassID" ON "Discounts" ("RoomClassID");
2025-02-13 21:38:27.122 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.124 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.125 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:27.127 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Discounts_RoomID" ON "Discounts" ("RoomID");
2025-02-13 21:38:27.139 -05:00 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Discounts_RoomID" ON "Discounts" ("RoomID");
2025-02-13 21:38:27.142 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.143 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.145 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:27.148 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Hotels_CityID" ON "Hotels" ("CityID");
2025-02-13 21:38:27.163 -05:00 [INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Hotels_CityID" ON "Hotels" ("CityID");
2025-02-13 21:38:27.167 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.169 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:27.172 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (5ms).
2025-02-13 21:38:27.174 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Hotels_OwnerID" ON "Hotels" ("OwnerID");
2025-02-13 21:38:27.194 -05:00 [INF] Executed DbCommand (20ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Hotels_OwnerID" ON "Hotels" ("OwnerID");
2025-02-13 21:38:27.202 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.203 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.205 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:27.207 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_InvoiceRecords_BookingID" ON "InvoiceRecords" ("BookingID");
2025-02-13 21:38:27.221 -05:00 [INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_InvoiceRecords_BookingID" ON "InvoiceRecords" ("BookingID");
2025-02-13 21:38:27.223 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.224 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.226 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:27.228 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Reviews_HotelId" ON "Reviews" ("HotelId");
2025-02-13 21:38:27.239 -05:00 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Reviews_HotelId" ON "Reviews" ("HotelId");
2025-02-13 21:38:27.241 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.243 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.244 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (2ms).
2025-02-13 21:38:27.247 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Reviews_UserId" ON "Reviews" ("UserId");
2025-02-13 21:38:27.257 -05:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Reviews_UserId" ON "Reviews" ("UserId");
2025-02-13 21:38:27.260 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.261 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.265 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (5ms).
2025-02-13 21:38:27.267 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_RoomClassAmenity_RoomClassID" ON "RoomClassAmenity" ("RoomClassID");
2025-02-13 21:38:27.275 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_RoomClassAmenity_RoomClassID" ON "RoomClassAmenity" ("RoomClassID");
2025-02-13 21:38:27.277 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.282 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (4ms).
2025-02-13 21:38:27.287 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (9ms).
2025-02-13 21:38:27.288 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_RoomClasses_HotelId" ON "RoomClasses" ("HotelId");
2025-02-13 21:38:27.298 -05:00 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_RoomClasses_HotelId" ON "RoomClasses" ("HotelId");
2025-02-13 21:38:27.301 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.303 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.305 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:27.306 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Rooms_RoomClassID" ON "Rooms" ("RoomClassID");
2025-02-13 21:38:27.320 -05:00 [INF] Executed DbCommand (14ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE INDEX "IX_Rooms_RoomClassID" ON "Rooms" ("RoomClassID");
2025-02-13 21:38:27.323 -05:00 [DBG] Creating DbCommand for 'ExecuteNonQuery'.
2025-02-13 21:38:27.325 -05:00 [DBG] Created DbCommand for 'ExecuteNonQuery' (1ms).
2025-02-13 21:38:27.327 -05:00 [DBG] Initialized DbCommand for 'ExecuteNonQuery' (3ms).
2025-02-13 21:38:27.328 -05:00 [DBG] Executing DbCommand [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250214023702_InitialCreate', '9.0.2');
2025-02-13 21:38:27.336 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
VALUES ('20250214023702_InitialCreate', '9.0.2');
2025-02-13 21:38:27.341 -05:00 [DBG] Committing transaction.
2025-02-13 21:38:27.357 -05:00 [DBG] Committed transaction.
2025-02-13 21:38:27.360 -05:00 [DBG] Disposing transaction.
2025-02-13 21:38:27.361 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:27.366 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (4ms).
2025-02-13 21:38:27.389 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 21:38:27.393 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:38:27.395 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 21:39:33.661 -05:00 [DBG] Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"]
2025-02-13 21:39:34.322 -05:00 [DBG] Hosting starting
2025-02-13 21:39:34.397 -05:00 [INF] User profile is available. Using 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-02-13 21:39:34.423 -05:00 [DBG] Reading data from file 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys\key-a85a9386-c5c5-4af5-8653-042df668f95b.xml'.
2025-02-13 21:39:34.458 -05:00 [DBG] Found key {a85a9386-c5c5-4af5-8653-042df668f95b}.
2025-02-13 21:39:34.487 -05:00 [DBG] Considering key {a85a9386-c5c5-4af5-8653-042df668f95b} with expiration date 2025-03-31 02:38:58Z as default key.
2025-02-13 21:39:34.496 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 21:39:34.510 -05:00 [DBG] Decrypting secret element using Windows DPAPI.
2025-02-13 21:39:34.518 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 21:39:34.541 -05:00 [DBG] Opening CNG algorithm 'AES' from provider 'null' with chaining mode CBC.
2025-02-13 21:39:34.555 -05:00 [DBG] Opening CNG algorithm 'SHA256' from provider 'null' with HMAC.
2025-02-13 21:39:34.573 -05:00 [DBG] Using key {a85a9386-c5c5-4af5-8653-042df668f95b} as the default key.
2025-02-13 21:39:34.576 -05:00 [DBG] Key ring with default key {a85a9386-c5c5-4af5-8653-042df668f95b} was loaded during application startup.
2025-02-13 21:39:35.886 -05:00 [INF] Now listening on: https://localhost:7294
2025-02-13 21:39:35.890 -05:00 [INF] Now listening on: http://localhost:5004
2025-02-13 21:39:35.892 -05:00 [DBG] Loaded hosting startup assembly HotelBookingPlatform.API
2025-02-13 21:39:35.905 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery
2025-02-13 21:39:35.939 -05:00 [DBG] Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh
2025-02-13 21:39:35.944 -05:00 [DBG] Connection id "0HNACK3916KPR" accepted.
2025-02-13 21:39:35.944 -05:00 [DBG] Connection id "0HNACK3916KPQ" accepted.
2025-02-13 21:39:35.945 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net
2025-02-13 21:39:35.971 -05:00 [DBG] Connection id "0HNACK3916KPR" started.
2025-02-13 21:39:35.984 -05:00 [DBG] Connection id "0HNACK3916KPQ" started.
2025-02-13 21:39:36.334 -05:00 [DBG] Connection id "0HNACK3916KPS" accepted.
2025-02-13 21:39:36.492 -05:00 [DBG] Connection id "0HNACK3916KPS" started.
2025-02-13 21:39:36.583 -05:00 [DBG] Connection 0HNACK3916KPS established using the following protocol: "Tls13"
2025-02-13 21:39:36.713 -05:00 [INF] Application started. Press Ctrl+C to shut down.
2025-02-13 21:39:36.804 -05:00 [INF] Hosting environment: Development
2025-02-13 21:39:36.819 -05:00 [INF] Content root path: C:\Users\jclay\OneDrive\Desktop\Extra\Projects\point\HotelBookingPlatform\HotelBookingPlatform.API
2025-02-13 21:39:36.836 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.html - null null
2025-02-13 21:39:36.837 -05:00 [DBG] Hosting started
2025-02-13 21:39:37.100 -05:00 [DBG] Wildcard detected, all requests with hosts will be allowed.
2025-02-13 21:39:37.210 -05:00 [DBG] No candidates found for the request path '/swagger/index.html'
2025-02-13 21:39:37.222 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:39:37.435 -05:00 [DBG] Response markup is scheduled to include Browser Link script injection.
2025-02-13 21:39:37.441 -05:00 [DBG] Response markup is scheduled to include browser refresh script injection.
2025-02-13 21:39:37.470 -05:00 [DBG] Response markup was updated to include Browser Link script injection.
2025-02-13 21:39:37.657 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_vs/browserLink - null null
2025-02-13 21:39:37.655 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - null null
2025-02-13 21:39:37.807 -05:00 [DBG] Response markup was updated to include browser refresh script injection.
2025-02-13 21:39:37.650 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.js - null null
2025-02-13 21:39:37.884 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.html - 200 null text/html;charset=utf-8 1080.8122ms
2025-02-13 21:39:37.924 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - 200 13800 application/javascript; charset=utf-8 268.8268ms
2025-02-13 21:39:37.930 -05:00 [DBG] No candidates found for the request path '/swagger/index.js'
2025-02-13 21:39:37.974 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:39:37.992 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.js - 200 null application/javascript;charset=utf-8 341.6286ms
2025-02-13 21:39:37.993 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_vs/browserLink - 200 null text/javascript; charset=UTF-8 336.8013ms
2025-02-13 21:39:38.903 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - null null
2025-02-13 21:39:38.956 -05:00 [DBG] No candidates found for the request path '/swagger/v1/swagger.json'
2025-02-13 21:39:38.957 -05:00 [DBG] Request did not match any endpoints
2025-02-13 21:39:39.171 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 267.7204ms
2025-02-13 21:39:46.042 -05:00 [DBG] Authentication of the HTTPS connection timed out.
2025-02-13 21:39:46.047 -05:00 [DBG] Connection id "0HNACK3916KPR" stopped.
2025-02-13 21:39:46.049 -05:00 [DBG] Connection id "0HNACK3916KPR" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 21:39:46.067 -05:00 [DBG] Authentication of the HTTPS connection timed out.
2025-02-13 21:39:46.068 -05:00 [DBG] Connection id "0HNACK3916KPQ" stopped.
2025-02-13 21:39:46.073 -05:00 [DBG] Connection id "0HNACK3916KPQ" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 21:40:50.788 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 113
2025-02-13 21:40:50.855 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 21:40:50.868 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 21:40:50.871 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 21:40:50.878 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 21:40:50.881 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 21:40:50.968 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 21:40:50.973 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 21:40:51.033 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 21:40:51.037 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 21:40:51.039 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 21:40:51.044 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 21:40:51.046 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 21:40:51.048 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 21:40:51.052 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 21:40:51.370 -05:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-02-13 21:40:51.427 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 21:40:51.450 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 21:40:51.463 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' using the name '' in request data ...
2025-02-13 21:40:51.468 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 21:40:51.495 -05:00 [DBG] Connection id "0HNACK3916KPS", Request id "0HNACK3916KPS:0000000B": started reading request body.
2025-02-13 21:40:51.497 -05:00 [DBG] Connection id "0HNACK3916KPS", Request id "0HNACK3916KPS:0000000B": done reading request body.
2025-02-13 21:40:51.520 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'
2025-02-13 21:40:51.523 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 21:40:51.527 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 21:40:51.529 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 21:40:51.545 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 21:40:52.625 -05:00 [DBG] The index {'BookingID'} was not created on entity type 'BookingRoom (Dictionary<string, object>)' as the properties are already covered by the index {'BookingID', 'RoomID'}.
2025-02-13 21:40:52.627 -05:00 [DBG] The index {'LocalUserId'} was not created on entity type 'RefreshToken' as the properties are already covered by the index {'LocalUserId', 'Id'}.
2025-02-13 21:40:52.629 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserRole<string>' as the properties are already covered by the index {'UserId', 'RoleId'}.
2025-02-13 21:40:52.630 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserToken<string>' as the properties are already covered by the index {'UserId', 'LoginProvider', 'Name'}.
2025-02-13 21:40:52.632 -05:00 [DBG] The index {'AmenityID'} was not created on entity type 'RoomClassAmenity (Dictionary<string, object>)' as the properties are already covered by the index {'AmenityID', 'RoomClassID'}.
2025-02-13 21:40:52.829 -05:00 [DBG] The property 'Discount.RoomClassID' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:40:52.831 -05:00 [DBG] The property 'RefreshToken.LocalUserId' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:40:52.833 -05:00 [DBG] The property 'RefreshToken.Id' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 21:40:52.983 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 21:40:53.070 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .SingleOrDefault(u => u.NormalizedEmail == __normalizedEmail_0)'
2025-02-13 21:40:53.144 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 21:40:53.658 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 21:40:53.734 -05:00 [DBG] Creating DbConnection.
2025-02-13 21:40:53.780 -05:00 [DBG] Created DbConnection. (44ms).
2025-02-13 21:40:53.786 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:53.967 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:53.975 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 21:40:53.984 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (5ms).
2025-02-13 21:40:53.996 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (21ms).
2025-02-13 21:40:54.008 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 21:40:54.108 -05:00 [INF] Executed DbCommand (97ms) [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 21:40:54.129 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.146 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 26ms reading results.
2025-02-13 21:40:54.152 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.162 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (9ms).
2025-02-13 21:40:54.330 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .FirstOrDefault(u => u.NormalizedUserName == __normalizedUserName_0)'
2025-02-13 21:40:54.333 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 21:40:54.384 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(1) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedUserName == @__normalizedUserName_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(1) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedUserName == @__normalizedUserName_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 21:40:54.399 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.401 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.402 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 21:40:54.406 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (3ms).
2025-02-13 21:40:54.407 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (4ms).
2025-02-13 21:40:54.408 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 21:40:54.420 -05:00 [INF] Executed DbCommand (12ms) [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 21:40:54.424 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.426 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 2ms reading results.
2025-02-13 21:40:54.429 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.430 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 21:40:54.589 -05:00 [DBG] Context 'AppDbContext' started tracking 'LocalUser' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 21:40:54.596 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 21:40:54.600 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 21:40:54.636 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 21:40:54.757 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.759 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.762 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 21:40:54.763 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 21:40:54.765 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 21:40:54.766 -05:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?' (DbType = Int32), @p2='?', @p3='?', @p4='?' (DbType = Boolean), @p5='?', @p6='?', @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime), @p9='?', @p10='?', @p11='?', @p12='?', @p13='?' (DbType = Boolean), @p14='?', @p15='?' (DbType = Boolean), @p16='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUsers" ("Id", "AccessFailedCount", "ConcurrencyStamp", "Email", "EmailConfirmed", "FirstName", "LastName", "LockoutEnabled", "LockoutEnd", "NormalizedEmail", "NormalizedUserName", "PasswordHash", "PhoneNumber", "PhoneNumberConfirmed", "SecurityStamp", "TwoFactorEnabled", "UserName")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);
2025-02-13 21:40:54.785 -05:00 [INF] Executed DbCommand (19ms) [Parameters=[@p0='?', @p1='?' (DbType = Int32), @p2='?', @p3='?', @p4='?' (DbType = Boolean), @p5='?', @p6='?', @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime), @p9='?', @p10='?', @p11='?', @p12='?', @p13='?' (DbType = Boolean), @p14='?', @p15='?' (DbType = Boolean), @p16='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUsers" ("Id", "AccessFailedCount", "ConcurrencyStamp", "Email", "EmailConfirmed", "FirstName", "LastName", "LockoutEnabled", "LockoutEnd", "NormalizedEmail", "NormalizedUserName", "PasswordHash", "PhoneNumber", "PhoneNumberConfirmed", "SecurityStamp", "TwoFactorEnabled", "UserName")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);
2025-02-13 21:40:54.796 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.797 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 5ms reading results.
2025-02-13 21:40:54.800 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.802 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 21:40:54.816 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 21:40:54.823 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 1 entities written to the database.
2025-02-13 21:40:54.831 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityRole>()
    .SingleOrDefault(r => r.NormalizedName == __normalizedRoleName_0)'
2025-02-13 21:40:54.842 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<IdentityRole>(
    asyncEnumerable: SingleQueryingEnumerable.Create<IdentityRole>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(2) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedRoleName_0) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(2) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedRoleName_0, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            IdentityRole entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                IdentityRole instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(IdentityRole);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: IdentityRole.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (IdentityRole)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]: 
                            {
                                return 
                                {
                                    IdentityRole instance;
                                    instance = new IdentityRole();
                                    instance.<Id>k__BackingField = dataReader.GetString(0);
                                    instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(1) ? default(string) : dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                    instance.<NormalizedName>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(IdentityRole)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            return entity;
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 21:40:54.848 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.849 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.851 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 21:40:54.852 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 21:40:54.855 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (4ms).
2025-02-13 21:40:54.857 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 21:40:54.862 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 21:40:54.865 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.867 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 21:40:54.868 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.872 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (3ms).
2025-02-13 21:40:54.881 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.882 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.883 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 21:40:54.884 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-02-13 21:40:54.885 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 21:40:54.889 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 21:40:54.894 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 21:40:54.896 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.897 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 21:40:54.899 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:54.900 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 21:40:55.068 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 4014.6064ms
2025-02-13 21:40:55.074 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 21:40:55.280 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 21:40:55.292 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 21:40:55.295 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (3ms).
2025-02-13 21:40:55.298 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 500 null application/json 4509.7171ms
2025-02-13 22:05:18.926 -05:00 [DBG] Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"]
2025-02-13 22:05:20.110 -05:00 [DBG] Hosting starting
2025-02-13 22:05:20.173 -05:00 [INF] User profile is available. Using 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-02-13 22:05:20.202 -05:00 [DBG] Reading data from file 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys\key-a85a9386-c5c5-4af5-8653-042df668f95b.xml'.
2025-02-13 22:05:20.240 -05:00 [DBG] Found key {a85a9386-c5c5-4af5-8653-042df668f95b}.
2025-02-13 22:05:20.267 -05:00 [DBG] Considering key {a85a9386-c5c5-4af5-8653-042df668f95b} with expiration date 2025-03-31 02:38:58Z as default key.
2025-02-13 22:05:20.283 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 22:05:20.297 -05:00 [DBG] Decrypting secret element using Windows DPAPI.
2025-02-13 22:05:20.307 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 22:05:20.329 -05:00 [DBG] Opening CNG algorithm 'AES' from provider 'null' with chaining mode CBC.
2025-02-13 22:05:20.368 -05:00 [DBG] Opening CNG algorithm 'SHA256' from provider 'null' with HMAC.
2025-02-13 22:05:20.397 -05:00 [DBG] Using key {a85a9386-c5c5-4af5-8653-042df668f95b} as the default key.
2025-02-13 22:05:20.401 -05:00 [DBG] Key ring with default key {a85a9386-c5c5-4af5-8653-042df668f95b} was loaded during application startup.
2025-02-13 22:05:20.998 -05:00 [INF] Now listening on: https://localhost:7294
2025-02-13 22:05:21.041 -05:00 [INF] Now listening on: http://localhost:5004
2025-02-13 22:05:21.043 -05:00 [DBG] Loaded hosting startup assembly HotelBookingPlatform.API
2025-02-13 22:05:21.044 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery
2025-02-13 22:05:21.046 -05:00 [DBG] Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh
2025-02-13 22:05:21.048 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net
2025-02-13 22:05:21.444 -05:00 [DBG] Connection id "0HNACKHLK7M10" accepted.
2025-02-13 22:05:21.468 -05:00 [DBG] Connection id "0HNACKHLK7M11" received FIN.
2025-02-13 22:05:21.469 -05:00 [DBG] Connection id "0HNACKHLK7M10" received FIN.
2025-02-13 22:05:22.147 -05:00 [DBG] Connection id "0HNACKHLK7M10" started.
2025-02-13 22:05:22.330 -05:00 [DBG] Connection id "0HNACKHLK7M11" accepted.
2025-02-13 22:05:22.337 -05:00 [DBG] Connection id "0HNACKHLK7M11" started.
2025-02-13 22:05:22.391 -05:00 [INF] Application started. Press Ctrl+C to shut down.
2025-02-13 22:05:22.428 -05:00 [INF] Hosting environment: Development
2025-02-13 22:05:22.444 -05:00 [DBG] Failed to authenticate HTTPS connection.
System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ProcessAuthenticationWithTelemetryAsync(Boolean isAsync, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-02-13 22:05:22.449 -05:00 [INF] Content root path: C:\Users\jclay\OneDrive\Desktop\Extra\Projects\point\HotelBookingPlatform\HotelBookingPlatform.API
2025-02-13 22:05:22.444 -05:00 [DBG] Failed to authenticate HTTPS connection.
System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ProcessAuthenticationWithTelemetryAsync(Boolean isAsync, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-02-13 22:05:22.587 -05:00 [DBG] Hosting started
2025-02-13 22:05:22.597 -05:00 [DBG] Connection id "0HNACKHLK7M10" stopped.
2025-02-13 22:05:22.597 -05:00 [DBG] Connection id "0HNACKHLK7M11" stopped.
2025-02-13 22:05:22.610 -05:00 [DBG] Connection id "0HNACKHLK7M11" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 22:05:22.610 -05:00 [DBG] Connection id "0HNACKHLK7M10" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 22:05:23.099 -05:00 [DBG] Connection id "0HNACKHLK7M12" accepted.
2025-02-13 22:05:23.226 -05:00 [DBG] Connection id "0HNACKHLK7M12" started.
2025-02-13 22:05:23.369 -05:00 [DBG] Connection 0HNACKHLK7M12 established using the following protocol: "Tls13"
2025-02-13 22:05:23.524 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.html - null null
2025-02-13 22:05:23.838 -05:00 [DBG] Wildcard detected, all requests with hosts will be allowed.
2025-02-13 22:05:23.929 -05:00 [DBG] No candidates found for the request path '/swagger/index.html'
2025-02-13 22:05:23.934 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:05:24.079 -05:00 [DBG] Response markup is scheduled to include Browser Link script injection.
2025-02-13 22:05:24.088 -05:00 [DBG] Response markup is scheduled to include browser refresh script injection.
2025-02-13 22:05:24.106 -05:00 [DBG] Response markup was updated to include Browser Link script injection.
2025-02-13 22:05:24.280 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_vs/browserLink - null null
2025-02-13 22:05:24.280 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - null null
2025-02-13 22:05:24.289 -05:00 [DBG] Response markup was updated to include browser refresh script injection.
2025-02-13 22:05:24.281 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.js - null null
2025-02-13 22:05:24.426 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.html - 200 null text/html;charset=utf-8 920.8249ms
2025-02-13 22:05:24.412 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - 200 13800 application/javascript; charset=utf-8 128.2723ms
2025-02-13 22:05:24.474 -05:00 [DBG] No candidates found for the request path '/swagger/index.js'
2025-02-13 22:05:24.546 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_vs/browserLink - 200 null text/javascript; charset=UTF-8 266.1819ms
2025-02-13 22:05:24.563 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:05:24.586 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.js - 200 null application/javascript;charset=utf-8 304.6491ms
2025-02-13 22:05:24.760 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - null null
2025-02-13 22:05:24.767 -05:00 [DBG] No candidates found for the request path '/swagger/v1/swagger.json'
2025-02-13 22:05:24.769 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:05:24.999 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 238.7274ms
2025-02-13 22:06:00.151 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 113
2025-02-13 22:06:00.192 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 22:06:00.202 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 22:06:00.205 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:00.208 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:06:00.211 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:06:00.316 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 22:06:00.320 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:00.368 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 22:06:00.374 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:06:00.377 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:06:00.383 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:06:00.387 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:06:00.390 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:06:00.400 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:06:00.607 -05:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-02-13 22:06:00.669 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:06:00.690 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:06:00.699 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' using the name '' in request data ...
2025-02-13 22:06:00.703 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:06:00.710 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:0000000B": started reading request body.
2025-02-13 22:06:00.712 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:0000000B": done reading request body.
2025-02-13 22:06:00.739 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'
2025-02-13 22:06:00.740 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:00.742 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:00.745 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:06:00.757 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:01.854 -05:00 [DBG] The index {'BookingID'} was not created on entity type 'BookingRoom (Dictionary<string, object>)' as the properties are already covered by the index {'BookingID', 'RoomID'}.
2025-02-13 22:06:01.857 -05:00 [DBG] The index {'LocalUserId'} was not created on entity type 'RefreshToken' as the properties are already covered by the index {'LocalUserId', 'Id'}.
2025-02-13 22:06:01.859 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserRole<string>' as the properties are already covered by the index {'UserId', 'RoleId'}.
2025-02-13 22:06:01.861 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserToken<string>' as the properties are already covered by the index {'UserId', 'LoginProvider', 'Name'}.
2025-02-13 22:06:01.865 -05:00 [DBG] The index {'AmenityID'} was not created on entity type 'RoomClassAmenity (Dictionary<string, object>)' as the properties are already covered by the index {'AmenityID', 'RoomClassID'}.
2025-02-13 22:06:02.141 -05:00 [DBG] The property 'Discount.RoomClassID' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:06:02.144 -05:00 [DBG] The property 'RefreshToken.LocalUserId' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:06:02.147 -05:00 [DBG] The property 'RefreshToken.Id' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:06:02.365 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:06:02.473 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .SingleOrDefault(u => u.NormalizedEmail == __normalizedEmail_0)'
2025-02-13 22:06:02.585 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 22:06:03.387 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:06:03.469 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:06:03.526 -05:00 [DBG] Created DbConnection. (54ms).
2025-02-13 22:06:03.536 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:03.805 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:03.814 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:06:03.834 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (7ms).
2025-02-13 22:06:03.856 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (41ms).
2025-02-13 22:06:03.885 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:04.025 -05:00 [INF] Executed DbCommand (156ms) [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:04.126 -05:00 [DBG] Context 'AppDbContext' started tracking 'LocalUser' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:06:04.216 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:04.234 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 197ms reading results.
2025-02-13 22:06:04.240 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:04.254 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (13ms).
2025-02-13 22:06:04.502 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 4105.9167ms
2025-02-13 22:06:04.505 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:04.707 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:06:04.721 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:04.735 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (13ms).
2025-02-13 22:06:04.741 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 400 null application/json 4589.8064ms
2025-02-13 22:06:20.390 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 109
2025-02-13 22:06:20.405 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 22:06:20.407 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 22:06:20.422 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:20.426 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:06:20.433 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:06:20.439 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 22:06:20.442 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:20.451 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 22:06:20.466 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:06:20.468 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:06:20.470 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:06:20.473 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:06:20.475 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:06:20.483 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:06:20.490 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:06:20.505 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:06:20.507 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' using the name '' in request data ...
2025-02-13 22:06:20.510 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:06:20.518 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:0000000D": started reading request body.
2025-02-13 22:06:20.520 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:0000000D": done reading request body.
2025-02-13 22:06:20.522 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'
2025-02-13 22:06:20.524 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:20.526 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:20.532 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:06:20.534 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:20.691 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:06:20.703 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:06:20.704 -05:00 [DBG] Created DbConnection. (1ms).
2025-02-13 22:06:20.706 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:20.709 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:20.720 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:06:20.722 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:06:20.724 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (5ms).
2025-02-13 22:06:20.726 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:20.755 -05:00 [INF] Executed DbCommand (28ms) [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:20.758 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:20.760 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:06:20.768 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:20.769 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:06:20.800 -05:00 [DBG] User password validation failed: PasswordRequiresNonAlphanumeric;PasswordRequiresDigit;PasswordRequiresUpper.
2025-02-13 22:06:20.884 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 401.5381ms
2025-02-13 22:06:20.887 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:20.981 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:06:20.983 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:20.986 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:06:20.987 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 400 null application/json 597.1019ms
2025-02-13 22:06:38.835 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 113
2025-02-13 22:06:38.840 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 22:06:38.842 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 22:06:38.846 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:38.920 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:06:38.923 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:06:38.946 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 22:06:38.947 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:38.949 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 22:06:38.952 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:06:38.954 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:06:38.955 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:06:38.957 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:06:38.959 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:06:38.962 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:06:38.984 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:06:38.985 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:06:38.987 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' using the name '' in request data ...
2025-02-13 22:06:38.988 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:06:38.989 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:0000000F": started reading request body.
2025-02-13 22:06:38.991 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:0000000F": done reading request body.
2025-02-13 22:06:38.992 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'
2025-02-13 22:06:38.995 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:38.996 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:38.997 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:06:38.999 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:39.013 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:06:39.018 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:06:39.019 -05:00 [DBG] Created DbConnection. (1ms).
2025-02-13 22:06:39.020 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:39.022 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:39.023 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:06:39.025 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:06:39.028 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (4ms).
2025-02-13 22:06:39.029 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:39.038 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:39.040 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:39.042 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:06:39.046 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:39.047 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:06:39.050 -05:00 [DBG] User password validation failed: PasswordRequiresUpper.
2025-02-13 22:06:39.157 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 195.3929ms
2025-02-13 22:06:39.163 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:39.281 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:06:39.285 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:39.288 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:06:39.289 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 400 null application/json 454.3785ms
2025-02-13 22:06:49.229 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 113
2025-02-13 22:06:49.232 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 22:06:49.235 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 22:06:49.237 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:49.238 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:06:49.240 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:06:49.286 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 22:06:49.335 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:49.341 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 22:06:49.352 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:06:49.357 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:06:49.360 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:06:49.362 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:06:49.365 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:06:49.368 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:06:49.371 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:06:49.374 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:06:49.376 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' using the name '' in request data ...
2025-02-13 22:06:49.378 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:06:49.383 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:00000011": started reading request body.
2025-02-13 22:06:49.388 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:00000011": done reading request body.
2025-02-13 22:06:49.389 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'
2025-02-13 22:06:49.391 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:49.395 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:49.397 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:06:49.398 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:06:49.404 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:06:49.407 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:06:49.410 -05:00 [DBG] Created DbConnection. (3ms).
2025-02-13 22:06:49.413 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.415 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.422 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:06:49.424 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:06:49.426 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:06:49.429 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:49.438 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:49.444 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.446 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:06:49.448 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.449 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:06:49.639 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .FirstOrDefault(u => u.NormalizedUserName == __normalizedUserName_0)'
2025-02-13 22:06:49.645 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 22:06:49.677 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(1) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedUserName == @__normalizedUserName_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(1) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedUserName == @__normalizedUserName_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:06:49.696 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.697 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.701 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:06:49.706 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (5ms).
2025-02-13 22:06:49.708 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (7ms).
2025-02-13 22:06:49.711 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:49.718 -05:00 [INF] Executed DbCommand (7ms) [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:06:49.722 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.724 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:06:49.726 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.727 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:06:49.764 -05:00 [DBG] Context 'AppDbContext' started tracking 'LocalUser' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:06:49.771 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:06:49.776 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:06:49.804 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:06:49.904 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.906 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.912 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:06:49.917 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (5ms).
2025-02-13 22:06:49.919 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (7ms).
2025-02-13 22:06:49.921 -05:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?' (DbType = Int32), @p2='?', @p3='?', @p4='?' (DbType = Boolean), @p5='?', @p6='?', @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime), @p9='?', @p10='?', @p11='?', @p12='?', @p13='?' (DbType = Boolean), @p14='?', @p15='?' (DbType = Boolean), @p16='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUsers" ("Id", "AccessFailedCount", "ConcurrencyStamp", "Email", "EmailConfirmed", "FirstName", "LastName", "LockoutEnabled", "LockoutEnd", "NormalizedEmail", "NormalizedUserName", "PasswordHash", "PhoneNumber", "PhoneNumberConfirmed", "SecurityStamp", "TwoFactorEnabled", "UserName")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);
2025-02-13 22:06:49.937 -05:00 [INF] Executed DbCommand (16ms) [Parameters=[@p0='?', @p1='?' (DbType = Int32), @p2='?', @p3='?', @p4='?' (DbType = Boolean), @p5='?', @p6='?', @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime), @p9='?', @p10='?', @p11='?', @p12='?', @p13='?' (DbType = Boolean), @p14='?', @p15='?' (DbType = Boolean), @p16='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUsers" ("Id", "AccessFailedCount", "ConcurrencyStamp", "Email", "EmailConfirmed", "FirstName", "LastName", "LockoutEnabled", "LockoutEnd", "NormalizedEmail", "NormalizedUserName", "PasswordHash", "PhoneNumber", "PhoneNumberConfirmed", "SecurityStamp", "TwoFactorEnabled", "UserName")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);
2025-02-13 22:06:49.946 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.947 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 6ms reading results.
2025-02-13 22:06:49.952 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:49.955 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:06:49.974 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:06:49.979 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 1 entities written to the database.
2025-02-13 22:06:49.995 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityRole>()
    .SingleOrDefault(r => r.NormalizedName == __normalizedRoleName_0)'
2025-02-13 22:06:50.013 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<IdentityRole>(
    asyncEnumerable: SingleQueryingEnumerable.Create<IdentityRole>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(2) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedRoleName_0) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(2) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedRoleName_0, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            IdentityRole entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                IdentityRole instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(IdentityRole);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: IdentityRole.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (IdentityRole)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]: 
                            {
                                return 
                                {
                                    IdentityRole instance;
                                    instance = new IdentityRole();
                                    instance.<Id>k__BackingField = dataReader.GetString(0);
                                    instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(1) ? default(string) : dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                    instance.<NormalizedName>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(IdentityRole)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            return entity;
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:06:50.026 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.027 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.029 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:06:50.030 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:06:50.032 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:06:50.038 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:06:50.043 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:06:50.047 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.048 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:06:50.053 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.054 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:06:50.059 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.061 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.062 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:06:50.063 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:06:50.065 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:06:50.067 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:06:50.072 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:06:50.076 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.077 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:06:50.079 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.080 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:06:50.220 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 851.7883ms
2025-02-13 22:06:50.223 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:06:50.353 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:06:50.356 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:06:50.358 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:06:50.359 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 500 null application/json 1131.0405ms
2025-02-13 22:12:14.793 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.html - null null
2025-02-13 22:12:14.842 -05:00 [DBG] No candidates found for the request path '/swagger/index.html'
2025-02-13 22:12:14.844 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:12:14.845 -05:00 [DBG] Response markup is scheduled to include Browser Link script injection.
2025-02-13 22:12:14.846 -05:00 [DBG] Response markup is scheduled to include browser refresh script injection.
2025-02-13 22:12:14.847 -05:00 [DBG] Response markup was updated to include Browser Link script injection.
2025-02-13 22:12:14.864 -05:00 [DBG] Response markup was updated to include browser refresh script injection.
2025-02-13 22:12:14.865 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.html - 200 null text/html;charset=utf-8 73.2963ms
2025-02-13 22:12:15.019 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.js - null null
2025-02-13 22:12:15.025 -05:00 [DBG] No candidates found for the request path '/swagger/index.js'
2025-02-13 22:12:15.026 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:12:15.032 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.js - 200 null application/javascript;charset=utf-8 12.5284ms
2025-02-13 22:12:15.143 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - null null
2025-02-13 22:12:15.150 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - 200 13800 application/javascript; charset=utf-8 6.4115ms
2025-02-13 22:12:15.165 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_vs/browserLink - null null
2025-02-13 22:12:15.214 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_vs/browserLink - 200 null text/javascript; charset=UTF-8 48.5424ms
2025-02-13 22:12:16.656 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - null null
2025-02-13 22:12:16.660 -05:00 [DBG] No candidates found for the request path '/swagger/v1/swagger.json'
2025-02-13 22:12:16.662 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:12:16.801 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 144.938ms
2025-02-13 22:12:55.715 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 110
2025-02-13 22:12:55.756 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 22:12:55.757 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 22:12:55.759 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:12:55.760 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:12:55.761 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:12:55.764 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 22:12:55.766 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:12:55.772 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 22:12:55.774 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:12:55.775 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:12:55.777 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:12:55.780 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:12:55.782 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:12:55.784 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:12:55.892 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 108.0583ms
2025-02-13 22:12:55.898 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:12:55.934 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 500 null application/json 225.5375ms
2025-02-13 22:12:55.940 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:0000001D": started reading request body.
2025-02-13 22:12:55.941 -05:00 [DBG] Connection id "0HNACKHLK7M12", Request id "0HNACKHLK7M12:0000001D": done reading request body.
2025-02-13 22:14:06.420 -05:00 [DBG] Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"]
2025-02-13 22:14:06.835 -05:00 [DBG] Hosting starting
2025-02-13 22:14:06.896 -05:00 [INF] User profile is available. Using 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-02-13 22:14:06.921 -05:00 [DBG] Reading data from file 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys\key-a85a9386-c5c5-4af5-8653-042df668f95b.xml'.
2025-02-13 22:14:06.947 -05:00 [DBG] Found key {a85a9386-c5c5-4af5-8653-042df668f95b}.
2025-02-13 22:14:06.970 -05:00 [DBG] Considering key {a85a9386-c5c5-4af5-8653-042df668f95b} with expiration date 2025-03-31 02:38:58Z as default key.
2025-02-13 22:14:06.983 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 22:14:07.000 -05:00 [DBG] Decrypting secret element using Windows DPAPI.
2025-02-13 22:14:07.007 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 22:14:07.018 -05:00 [DBG] Opening CNG algorithm 'AES' from provider 'null' with chaining mode CBC.
2025-02-13 22:14:07.026 -05:00 [DBG] Opening CNG algorithm 'SHA256' from provider 'null' with HMAC.
2025-02-13 22:14:07.034 -05:00 [DBG] Using key {a85a9386-c5c5-4af5-8653-042df668f95b} as the default key.
2025-02-13 22:14:07.036 -05:00 [DBG] Key ring with default key {a85a9386-c5c5-4af5-8653-042df668f95b} was loaded during application startup.
2025-02-13 22:14:07.432 -05:00 [INF] Now listening on: https://localhost:7294
2025-02-13 22:14:07.434 -05:00 [INF] Now listening on: http://localhost:5004
2025-02-13 22:14:07.436 -05:00 [DBG] Loaded hosting startup assembly HotelBookingPlatform.API
2025-02-13 22:14:07.437 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery
2025-02-13 22:14:07.438 -05:00 [DBG] Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh
2025-02-13 22:14:07.439 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net
2025-02-13 22:14:07.683 -05:00 [INF] Application started. Press Ctrl+C to shut down.
2025-02-13 22:14:07.687 -05:00 [INF] Hosting environment: Development
2025-02-13 22:14:07.688 -05:00 [INF] Content root path: C:\Users\jclay\OneDrive\Desktop\Extra\Projects\point\HotelBookingPlatform\HotelBookingPlatform.API
2025-02-13 22:14:07.689 -05:00 [DBG] Hosting started
2025-02-13 22:14:07.722 -05:00 [DBG] Connection id "0HNACKMIF74FV" received FIN.
2025-02-13 22:14:07.764 -05:00 [DBG] Connection id "0HNACKMIF74FV" accepted.
2025-02-13 22:14:07.814 -05:00 [DBG] Connection id "0HNACKMIF74FV" started.
2025-02-13 22:14:07.876 -05:00 [DBG] Failed to authenticate HTTPS connection.
System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ProcessAuthenticationWithTelemetryAsync(Boolean isAsync, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-02-13 22:14:07.952 -05:00 [DBG] Connection id "0HNACKMIF74FV" stopped.
2025-02-13 22:14:08.006 -05:00 [DBG] Connection id "0HNACKMIF74FV" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 22:14:08.470 -05:00 [DBG] Connection id "0HNACKMIF74G0" accepted.
2025-02-13 22:14:08.629 -05:00 [DBG] Connection id "0HNACKMIF74G0" started.
2025-02-13 22:14:08.747 -05:00 [DBG] Connection 0HNACKMIF74G0 established using the following protocol: "Tls13"
2025-02-13 22:14:08.870 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.html - null null
2025-02-13 22:14:09.121 -05:00 [DBG] Wildcard detected, all requests with hosts will be allowed.
2025-02-13 22:14:09.202 -05:00 [DBG] No candidates found for the request path '/swagger/index.html'
2025-02-13 22:14:09.211 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:14:09.370 -05:00 [DBG] Response markup is scheduled to include Browser Link script injection.
2025-02-13 22:14:09.380 -05:00 [DBG] Response markup is scheduled to include browser refresh script injection.
2025-02-13 22:14:09.399 -05:00 [DBG] Response markup was updated to include Browser Link script injection.
2025-02-13 22:14:09.558 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - null null
2025-02-13 22:14:09.563 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.js - null null
2025-02-13 22:14:09.563 -05:00 [DBG] Response markup was updated to include browser refresh script injection.
2025-02-13 22:14:09.568 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_vs/browserLink - null null
2025-02-13 22:14:09.614 -05:00 [DBG] No candidates found for the request path '/swagger/index.js'
2025-02-13 22:14:09.625 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.html - 200 null text/html;charset=utf-8 771.7888ms
2025-02-13 22:14:09.665 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - 200 13800 application/javascript; charset=utf-8 102.6903ms
2025-02-13 22:14:09.634 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:14:09.730 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.js - 200 null application/javascript;charset=utf-8 166.8726ms
2025-02-13 22:14:09.772 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_vs/browserLink - 200 null text/javascript; charset=UTF-8 203.9783ms
2025-02-13 22:14:09.922 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - null null
2025-02-13 22:14:09.931 -05:00 [DBG] No candidates found for the request path '/swagger/v1/swagger.json'
2025-02-13 22:14:09.936 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:14:10.150 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 228.7026ms
2025-02-13 22:14:39.926 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 111
2025-02-13 22:14:39.951 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 22:14:39.956 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 22:14:39.959 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:14:39.965 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:14:39.967 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:14:40.026 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 22:14:40.032 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:14:40.073 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 22:14:40.080 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:14:40.082 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:14:40.084 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:14:40.087 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:14:40.089 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:14:40.093 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:14:40.270 -05:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-02-13 22:14:40.330 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:14:40.346 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:14:40.350 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' using the name '' in request data ...
2025-02-13 22:14:40.354 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:14:40.373 -05:00 [DBG] Connection id "0HNACKMIF74G0", Request id "0HNACKMIF74G0:0000000B": started reading request body.
2025-02-13 22:14:40.375 -05:00 [DBG] Connection id "0HNACKMIF74G0", Request id "0HNACKMIF74G0:0000000B": done reading request body.
2025-02-13 22:14:40.402 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'
2025-02-13 22:14:40.404 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:14:40.406 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:14:40.407 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:14:40.422 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:14:41.471 -05:00 [DBG] The index {'BookingID'} was not created on entity type 'BookingRoom (Dictionary<string, object>)' as the properties are already covered by the index {'BookingID', 'RoomID'}.
2025-02-13 22:14:41.474 -05:00 [DBG] The index {'LocalUserId'} was not created on entity type 'RefreshToken' as the properties are already covered by the index {'LocalUserId', 'Id'}.
2025-02-13 22:14:41.477 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserRole<string>' as the properties are already covered by the index {'UserId', 'RoleId'}.
2025-02-13 22:14:41.480 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserToken<string>' as the properties are already covered by the index {'UserId', 'LoginProvider', 'Name'}.
2025-02-13 22:14:41.482 -05:00 [DBG] The index {'AmenityID'} was not created on entity type 'RoomClassAmenity (Dictionary<string, object>)' as the properties are already covered by the index {'AmenityID', 'RoomClassID'}.
2025-02-13 22:14:41.738 -05:00 [DBG] The property 'Discount.RoomClassID' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:14:41.740 -05:00 [DBG] The property 'RefreshToken.LocalUserId' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:14:41.741 -05:00 [DBG] The property 'RefreshToken.Id' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:14:41.930 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:14:42.020 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .SingleOrDefault(u => u.NormalizedEmail == __normalizedEmail_0)'
2025-02-13 22:14:42.098 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 22:14:42.688 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:14:42.782 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:14:42.832 -05:00 [DBG] Created DbConnection. (46ms).
2025-02-13 22:14:42.838 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.083 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.090 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:43.102 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (7ms).
2025-02-13 22:14:43.115 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (25ms).
2025-02-13 22:14:43.129 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:14:43.235 -05:00 [INF] Executed DbCommand (109ms) [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:14:43.249 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.263 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 16ms reading results.
2025-02-13 22:14:43.269 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.278 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (8ms).
2025-02-13 22:14:43.401 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .FirstOrDefault(u => u.NormalizedUserName == __normalizedUserName_0)'
2025-02-13 22:14:43.404 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 22:14:43.430 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(1) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedUserName == @__normalizedUserName_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(1) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedUserName == @__normalizedUserName_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:14:43.445 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.447 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.448 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:43.450 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:43.451 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:14:43.453 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:14:43.466 -05:00 [INF] Executed DbCommand (13ms) [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:14:43.469 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.471 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 2ms reading results.
2025-02-13 22:14:43.473 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.477 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (3ms).
2025-02-13 22:14:43.640 -05:00 [DBG] Context 'AppDbContext' started tracking 'LocalUser' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:43.649 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:14:43.654 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:14:43.690 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:14:43.816 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.817 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.821 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:43.822 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:43.825 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:14:43.827 -05:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?' (DbType = Int32), @p2='?', @p3='?', @p4='?' (DbType = Boolean), @p5='?', @p6='?', @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime), @p9='?', @p10='?', @p11='?', @p12='?', @p13='?' (DbType = Boolean), @p14='?', @p15='?' (DbType = Boolean), @p16='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUsers" ("Id", "AccessFailedCount", "ConcurrencyStamp", "Email", "EmailConfirmed", "FirstName", "LastName", "LockoutEnabled", "LockoutEnd", "NormalizedEmail", "NormalizedUserName", "PasswordHash", "PhoneNumber", "PhoneNumberConfirmed", "SecurityStamp", "TwoFactorEnabled", "UserName")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);
2025-02-13 22:14:43.848 -05:00 [INF] Executed DbCommand (21ms) [Parameters=[@p0='?', @p1='?' (DbType = Int32), @p2='?', @p3='?', @p4='?' (DbType = Boolean), @p5='?', @p6='?', @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime), @p9='?', @p10='?', @p11='?', @p12='?', @p13='?' (DbType = Boolean), @p14='?', @p15='?' (DbType = Boolean), @p16='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUsers" ("Id", "AccessFailedCount", "ConcurrencyStamp", "Email", "EmailConfirmed", "FirstName", "LastName", "LockoutEnabled", "LockoutEnd", "NormalizedEmail", "NormalizedUserName", "PasswordHash", "PhoneNumber", "PhoneNumberConfirmed", "SecurityStamp", "TwoFactorEnabled", "UserName")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);
2025-02-13 22:14:43.855 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.857 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 5ms reading results.
2025-02-13 22:14:43.862 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.863 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:43.878 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:43.884 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 1 entities written to the database.
2025-02-13 22:14:43.898 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityRole>()
    .FirstOrDefault(r => r.NormalizedName == __normalizedName_0)'
2025-02-13 22:14:43.914 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<IdentityRole>(
    asyncEnumerable: SingleQueryingEnumerable.Create<IdentityRole>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(1) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedName_0) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(1) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedName_0, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            IdentityRole entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                IdentityRole instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(IdentityRole);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: IdentityRole.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (IdentityRole)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]: 
                            {
                                return 
                                {
                                    IdentityRole instance;
                                    instance = new IdentityRole();
                                    instance.<Id>k__BackingField = dataReader.GetString(0);
                                    instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(1) ? default(string) : dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                    instance.<NormalizedName>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(IdentityRole)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            return entity;
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:14:43.920 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.922 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.923 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:43.926 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:14:43.928 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (4ms).
2025-02-13 22:14:43.929 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedName_0
LIMIT 1
2025-02-13 22:14:43.934 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedName_0
LIMIT 1
2025-02-13 22:14:43.939 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.941 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:14:43.945 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.946 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:43.961 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.963 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.965 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:43.966 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:43.968 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:14:43.970 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedName_0
LIMIT 1
2025-02-13 22:14:43.975 -05:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedName_0
LIMIT 1
2025-02-13 22:14:43.979 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.980 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:14:43.984 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:43.986 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:14:44.013 -05:00 [DBG] Context 'AppDbContext' started tracking 'IdentityRole' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.016 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:14:44.018 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:14:44.023 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:14:44.028 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.030 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.031 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.032 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-02-13 22:14:44.034 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:14:44.035 -05:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?', @p2='?', @p3='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetRoles" ("Id", "ConcurrencyStamp", "Name", "NormalizedName")
VALUES (@p0, @p1, @p2, @p3);
2025-02-13 22:14:44.045 -05:00 [INF] Executed DbCommand (10ms) [Parameters=[@p0='?', @p1='?', @p2='?', @p3='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetRoles" ("Id", "ConcurrencyStamp", "Name", "NormalizedName")
VALUES (@p0, @p1, @p2, @p3);
2025-02-13 22:14:44.048 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.049 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:14:44.051 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.053 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:44.055 -05:00 [DBG] An entity of type 'IdentityRole' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.059 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 1 entities written to the database.
2025-02-13 22:14:44.068 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityRole>()
    .SingleOrDefault(r => r.NormalizedName == __normalizedRoleName_0)'
2025-02-13 22:14:44.079 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<IdentityRole>(
    asyncEnumerable: SingleQueryingEnumerable.Create<IdentityRole>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(2) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedRoleName_0) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(2) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedRoleName_0, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            IdentityRole entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                IdentityRole instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(IdentityRole);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: IdentityRole.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (IdentityRole)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]: 
                            {
                                return 
                                {
                                    IdentityRole instance;
                                    instance = new IdentityRole();
                                    instance.<Id>k__BackingField = dataReader.GetString(0);
                                    instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(1) ? default(string) : dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                    instance.<NormalizedName>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(IdentityRole)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            return entity;
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:14:44.084 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.086 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.088 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.089 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:44.094 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (6ms).
2025-02-13 22:14:44.097 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:14:44.102 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:14:44.115 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.117 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 11ms reading results.
2025-02-13 22:14:44.119 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.120 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:44.156 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityUserRole<string>>()
    .FirstOrDefault(e => EF.Property<string>(e, "UserId") == __p_0 && EF.Property<string>(e, "RoleId") == __p_1)'
2025-02-13 22:14:44.172 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<IdentityUserRole<string>>(
    asyncEnumerable: SingleQueryingEnumerable.Create<IdentityUserRole<string>>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityUserRole<string>.UserId (string) Required PK FK AfterSave:Throw, 0], [Property: IdentityUserRole<string>.RoleId (string) Required PK FK Index AfterSave:Throw, 1] }
            SELECT TOP(1) a.UserId, a.RoleId
            FROM AspNetUserRoles AS a
            WHERE (a.UserId == @__p_0) && (a.RoleId == @__p_1)) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityUserRole<string>.UserId (string) Required PK FK AfterSave:Throw, 0], [Property: IdentityUserRole<string>.RoleId (string) Required PK FK Index AfterSave:Throw, 1] }
            SELECT TOP(1) a.UserId, a.RoleId
            FROM AspNetUserRoles AS a
            WHERE (a.UserId == @__p_0) && (a.RoleId == @__p_1), 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            IdentityUserRole<string> entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                IdentityUserRole<string> instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(IdentityUserRole<string>);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: IdentityUserRole<string>.UserId, IdentityUserRole<string>.RoleId PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>").FindPrimaryKey()], 
                    keyValues: new object[]
                    { 
                        (object)dataReader.GetString(0), 
                        (object)dataReader.GetString(1) 
                    }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (IdentityUserRole<string>)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: IdentityUserRole<string> | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: IdentityUserRole<string> | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")]: 
                            {
                                return 
                                {
                                    IdentityUserRole<string> instance;
                                    instance = new IdentityUserRole<string>();
                                    instance.<UserId>k__BackingField = dataReader.GetString(0);
                                    instance.<RoleId>k__BackingField = dataReader.GetString(1);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: IdentityUserRole<string> | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(IdentityUserRole<string>)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            return entity;
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:14:44.182 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.183 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.185 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.186 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:44.188 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:14:44.189 -05:00 [DBG] Executing DbCommand [Parameters=[@__p_0='?', @__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."UserId", a."RoleId"
FROM "AspNetUserRoles" AS a
WHERE a."UserId" = @__p_0 AND a."RoleId" = @__p_1
LIMIT 1
2025-02-13 22:14:44.197 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[@__p_0='?', @__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."UserId", a."RoleId"
FROM "AspNetUserRoles" AS a
WHERE a."UserId" = @__p_0 AND a."RoleId" = @__p_1
LIMIT 1
2025-02-13 22:14:44.200 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.202 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:14:44.204 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.206 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:44.213 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.215 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.216 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.217 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:44.219 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:14:44.221 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:14:44.231 -05:00 [INF] Executed DbCommand (11ms) [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:14:44.236 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.238 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 2ms reading results.
2025-02-13 22:14:44.245 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.247 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:14:44.270 -05:00 [DBG] Context 'AppDbContext' started tracking 'IdentityUserRole' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.277 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.280 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.281 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.283 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:44.284 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:14:44.285 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:14:44.297 -05:00 [INF] Executed DbCommand (12ms) [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:14:44.316 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.317 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 16ms reading results.
2025-02-13 22:14:44.319 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.320 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:44.331 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Unchanged"' to '"Modified"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.333 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:14:44.334 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:14:44.336 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:14:44.361 -05:00 [DBG] Executing 2 update commands as a batch.
2025-02-13 22:14:44.365 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.366 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.369 -05:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-02-13 22:14:44.379 -05:00 [DBG] Began transaction with isolation level 'ReadCommitted'.
2025-02-13 22:14:44.382 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.383 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:44.386 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:14:44.387 -05:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?', @p18='?', @p2='?' (DbType = Int32), @p3='?', @p19='?', @p4='?', @p5='?' (DbType = Boolean), @p6='?', @p7='?', @p8='?' (DbType = Boolean), @p9='?' (DbType = DateTime), @p10='?', @p11='?', @p12='?', @p13='?', @p14='?' (DbType = Boolean), @p15='?', @p16='?' (DbType = Boolean), @p17='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUserRoles" ("RoleId", "UserId")
VALUES (@p0, @p1);
UPDATE "AspNetUsers" SET "AccessFailedCount" = @p2, "ConcurrencyStamp" = @p3, "Email" = @p4, "EmailConfirmed" = @p5, "FirstName" = @p6, "LastName" = @p7, "LockoutEnabled" = @p8, "LockoutEnd" = @p9, "NormalizedEmail" = @p10, "NormalizedUserName" = @p11, "PasswordHash" = @p12, "PhoneNumber" = @p13, "PhoneNumberConfirmed" = @p14, "SecurityStamp" = @p15, "TwoFactorEnabled" = @p16, "UserName" = @p17
WHERE "Id" = @p18 AND "ConcurrencyStamp" = @p19;
2025-02-13 22:14:44.404 -05:00 [INF] Executed DbCommand (17ms) [Parameters=[@p0='?', @p1='?', @p18='?', @p2='?' (DbType = Int32), @p3='?', @p19='?', @p4='?', @p5='?' (DbType = Boolean), @p6='?', @p7='?', @p8='?' (DbType = Boolean), @p9='?' (DbType = DateTime), @p10='?', @p11='?', @p12='?', @p13='?', @p14='?' (DbType = Boolean), @p15='?', @p16='?' (DbType = Boolean), @p17='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUserRoles" ("RoleId", "UserId")
VALUES (@p0, @p1);
UPDATE "AspNetUsers" SET "AccessFailedCount" = @p2, "ConcurrencyStamp" = @p3, "Email" = @p4, "EmailConfirmed" = @p5, "FirstName" = @p6, "LastName" = @p7, "LockoutEnabled" = @p8, "LockoutEnd" = @p9, "NormalizedEmail" = @p10, "NormalizedUserName" = @p11, "PasswordHash" = @p12, "PhoneNumber" = @p13, "PhoneNumberConfirmed" = @p14, "SecurityStamp" = @p15, "TwoFactorEnabled" = @p16, "UserName" = @p17
WHERE "Id" = @p18 AND "ConcurrencyStamp" = @p19;
2025-02-13 22:14:44.410 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.412 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:14:44.416 -05:00 [DBG] Committing transaction.
2025-02-13 22:14:44.430 -05:00 [DBG] Committed transaction.
2025-02-13 22:14:44.434 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.435 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:44.446 -05:00 [DBG] Disposing transaction.
2025-02-13 22:14:44.448 -05:00 [DBG] An entity of type 'IdentityUserRole' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.450 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Modified"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.453 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 2 entities written to the database.
2025-02-13 22:14:44.480 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityUserClaim<string>>()
    .Where(uc => uc.UserId.Equals(__user_Id_0))
    .Select(c => c.ToClaim())'
2025-02-13 22:14:44.497 -05:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Claim>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: IdentityUserClaim<string>.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: IdentityUserClaim<string>.ClaimType (string), 1], [Property: IdentityUserClaim<string>.ClaimValue (string), 2], [Property: IdentityUserClaim<string>.UserId (string) Required FK Index, 3] }
        SELECT a.Id, a.ClaimType, a.ClaimValue, a.UserId
        FROM AspNetUserClaims AS a
        WHERE a.UserId == @__user_Id_0) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: IdentityUserClaim<string>.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: IdentityUserClaim<string>.ClaimType (string), 1], [Property: IdentityUserClaim<string>.ClaimValue (string), 2], [Property: IdentityUserClaim<string>.UserId (string) Required FK Index, 3] }
        SELECT a.Id, a.ClaimType, a.ClaimValue, a.UserId
        FROM AspNetUserClaims AS a
        WHERE a.UserId == @__user_Id_0, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        IdentityUserClaim<string> entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            IdentityUserClaim<string> instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(IdentityUserClaim<string>);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: IdentityUserClaim<string>.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (IdentityUserClaim<string>)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: IdentityUserClaim<string> | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: IdentityUserClaim<string> | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")]: 
                        {
                            return 
                            {
                                IdentityUserClaim<string> instance;
                                instance = new IdentityUserClaim<string>();
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<ClaimType>k__BackingField = dataReader.IsDBNull(1) ? default(string) : dataReader.GetString(1);
                                instance.<ClaimValue>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                instance.<UserId>k__BackingField = dataReader.GetString(3);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: IdentityUserClaim<string> | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(IdentityUserClaim<string>)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity.ToClaim();
    }, 
    contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-02-13 22:14:44.504 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.505 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.509 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.514 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (5ms).
2025-02-13 22:14:44.516 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (6ms).
2025-02-13 22:14:44.518 -05:00 [DBG] Executing DbCommand [Parameters=[@__user_Id_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ClaimType", a."ClaimValue", a."UserId"
FROM "AspNetUserClaims" AS a
WHERE a."UserId" = @__user_Id_0
2025-02-13 22:14:44.530 -05:00 [INF] Executed DbCommand (12ms) [Parameters=[@__user_Id_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ClaimType", a."ClaimValue", a."UserId"
FROM "AspNetUserClaims" AS a
WHERE a."UserId" = @__user_Id_0
2025-02-13 22:14:44.536 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.538 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 2ms reading results.
2025-02-13 22:14:44.542 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.545 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:14:44.555 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityUserRole<string>>()
    .Join(
        inner: DbSet<IdentityRole>(), 
        outerKeySelector: userRole => userRole.RoleId, 
        innerKeySelector: role => role.Id, 
        resultSelector: (userRole, role) => new { 
            userRole = userRole, 
            role = role
         })
    .Where(<>h__TransparentIdentifier0 => <>h__TransparentIdentifier0.userRole.UserId.Equals(__userId_0))
    .Select(<>h__TransparentIdentifier0 => <>h__TransparentIdentifier0.role.Name)'
2025-02-13 22:14:44.584 -05:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<string>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> 0
        SELECT a0.Name
        FROM AspNetUserRoles AS a
        INNER JOIN AspNetRoles AS a0 ON a.RoleId == a0.Id
        WHERE a.UserId == @__userId_0) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> 0
        SELECT a0.Name
        FROM AspNetUserRoles AS a
        INNER JOIN AspNetRoles AS a0 ON a.RoleId == a0.Id
        WHERE a.UserId == @__userId_0, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        string value1;
        value1 = dataReader.IsDBNull(0) ? default(string) : dataReader.GetString(0);
        return value1;
    }, 
    contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-02-13 22:14:44.588 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.592 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.594 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.595 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:44.597 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:14:44.598 -05:00 [DBG] Executing DbCommand [Parameters=[@__userId_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Name"
FROM "AspNetUserRoles" AS a
INNER JOIN "AspNetRoles" AS a0 ON a."RoleId" = a0."Id"
WHERE a."UserId" = @__userId_0
2025-02-13 22:14:44.602 -05:00 [INF] Executed DbCommand (4ms) [Parameters=[@__userId_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Name"
FROM "AspNetUserRoles" AS a
INNER JOIN "AspNetRoles" AS a0 ON a."RoleId" = a0."Id"
WHERE a."UserId" = @__userId_0
2025-02-13 22:14:44.606 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.609 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 3ms reading results.
2025-02-13 22:14:44.611 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.613 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:44.625 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.626 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.628 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.629 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:44.631 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:14:44.632 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:14:44.639 -05:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:14:44.644 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.646 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:14:44.648 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.649 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:44.651 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Unchanged"' to '"Modified"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.654 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:14:44.655 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:14:44.664 -05:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LocalUser.RefreshTokens'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.695 -05:00 [DBG] 'AppDbContext' generated a temporary value for the property 'RefreshToken.Id'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.730 -05:00 [DBG] Context 'AppDbContext' started tracking 'RefreshToken' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.733 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:14:44.744 -05:00 [DBG] Executing 2 update commands as a batch.
2025-02-13 22:14:44.745 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.746 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.748 -05:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-02-13 22:14:44.749 -05:00 [DBG] Began transaction with isolation level 'ReadCommitted'.
2025-02-13 22:14:44.750 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:14:44.752 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:14:44.754 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:14:44.755 -05:00 [DBG] Executing DbCommand [Parameters=[@p16='?', @p0='?' (DbType = Int32), @p1='?', @p17='?', @p2='?', @p3='?' (DbType = Boolean), @p4='?', @p5='?', @p6='?' (DbType = Boolean), @p7='?' (DbType = DateTime), @p8='?', @p9='?', @p10='?', @p11='?', @p12='?' (DbType = Boolean), @p13='?', @p14='?' (DbType = Boolean), @p15='?', @p18='?', @p19='?' (DbType = DateTime), @p20='?' (DbType = DateTime), @p21='?' (DbType = DateTime), @p22='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "AccessFailedCount" = @p0, "ConcurrencyStamp" = @p1, "Email" = @p2, "EmailConfirmed" = @p3, "FirstName" = @p4, "LastName" = @p5, "LockoutEnabled" = @p6, "LockoutEnd" = @p7, "NormalizedEmail" = @p8, "NormalizedUserName" = @p9, "PasswordHash" = @p10, "PhoneNumber" = @p11, "PhoneNumberConfirmed" = @p12, "SecurityStamp" = @p13, "TwoFactorEnabled" = @p14, "UserName" = @p15
WHERE "Id" = @p16 AND "ConcurrencyStamp" = @p17;
INSERT INTO "RefreshToken" ("LocalUserId", "CreatedOn", "ExpiresOn", "RevokedOn", "Token")
VALUES (@p18, @p19, @p20, @p21, @p22)
RETURNING "Id";
2025-02-13 22:14:44.765 -05:00 [INF] Executed DbCommand (9ms) [Parameters=[@p16='?', @p0='?' (DbType = Int32), @p1='?', @p17='?', @p2='?', @p3='?' (DbType = Boolean), @p4='?', @p5='?', @p6='?' (DbType = Boolean), @p7='?' (DbType = DateTime), @p8='?', @p9='?', @p10='?', @p11='?', @p12='?' (DbType = Boolean), @p13='?', @p14='?' (DbType = Boolean), @p15='?', @p18='?', @p19='?' (DbType = DateTime), @p20='?' (DbType = DateTime), @p21='?' (DbType = DateTime), @p22='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "AccessFailedCount" = @p0, "ConcurrencyStamp" = @p1, "Email" = @p2, "EmailConfirmed" = @p3, "FirstName" = @p4, "LastName" = @p5, "LockoutEnabled" = @p6, "LockoutEnd" = @p7, "NormalizedEmail" = @p8, "NormalizedUserName" = @p9, "PasswordHash" = @p10, "PhoneNumber" = @p11, "PhoneNumberConfirmed" = @p12, "SecurityStamp" = @p13, "TwoFactorEnabled" = @p14, "UserName" = @p15
WHERE "Id" = @p16 AND "ConcurrencyStamp" = @p17;
INSERT INTO "RefreshToken" ("LocalUserId", "CreatedOn", "ExpiresOn", "RevokedOn", "Token")
VALUES (@p18, @p19, @p20, @p21, @p22)
RETURNING "Id";
2025-02-13 22:14:44.780 -05:00 [DBG] The foreign key property 'RefreshToken.Id' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.
2025-02-13 22:14:44.786 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.788 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 20ms reading results.
2025-02-13 22:14:44.792 -05:00 [DBG] Committing transaction.
2025-02-13 22:14:44.797 -05:00 [DBG] Committed transaction.
2025-02-13 22:14:44.798 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.799 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:14:44.801 -05:00 [DBG] Disposing transaction.
2025-02-13 22:14:44.803 -05:00 [DBG] An entity of type 'RefreshToken' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.805 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Modified"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:14:44.809 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 2 entities written to the database.
2025-02-13 22:14:44.879 -05:00 [DBG] List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter"]
2025-02-13 22:14:44.884 -05:00 [DBG] No information found on request to perform content negotiation.
2025-02-13 22:14:44.885 -05:00 [DBG] Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.
2025-02-13 22:14:44.886 -05:00 [DBG] Attempting to select the first formatter in the output formatters list which can write the result.
2025-02-13 22:14:44.888 -05:00 [DBG] Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response.
2025-02-13 22:14:44.892 -05:00 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType6`4[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[HotelBookingPlatform.Domain.Helpers.AuthModel, HotelBookingPlatform.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-02-13 22:14:44.932 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 4827.8522ms
2025-02-13 22:14:44.934 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:14:44.943 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:14:44.950 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:14:44.965 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (9ms).
2025-02-13 22:14:44.970 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 200 null application/json; charset=utf-8 5053.0271ms
2025-02-13 22:31:26.810 -05:00 [DBG] Registered model binder providers, in the following order: ["Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BinderTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ServicesModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.BodyModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.HeaderModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FloatingPointTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.EnumTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DateTimeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.SimpleTypeModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.TryParseModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CancellationTokenModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ByteArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormFileModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.FormCollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.KeyValuePairModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.DictionaryModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ArrayModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.CollectionModelBinderProvider","Microsoft.AspNetCore.Mvc.ModelBinding.Binders.ComplexObjectModelBinderProvider"]
2025-02-13 22:31:27.213 -05:00 [DBG] Hosting starting
2025-02-13 22:31:27.286 -05:00 [INF] User profile is available. Using 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2025-02-13 22:31:27.316 -05:00 [DBG] Reading data from file 'C:\Users\jclay\AppData\Local\ASP.NET\DataProtection-Keys\key-a85a9386-c5c5-4af5-8653-042df668f95b.xml'.
2025-02-13 22:31:27.332 -05:00 [DBG] Found key {a85a9386-c5c5-4af5-8653-042df668f95b}.
2025-02-13 22:31:27.347 -05:00 [DBG] Considering key {a85a9386-c5c5-4af5-8653-042df668f95b} with expiration date 2025-03-31 02:38:58Z as default key.
2025-02-13 22:31:27.356 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.XmlEncryption.DpapiXmlDecryptor, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 22:31:27.360 -05:00 [DBG] Decrypting secret element using Windows DPAPI.
2025-02-13 22:31:27.365 -05:00 [DBG] Forwarded activator type request from Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Version=8.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60 to Microsoft.AspNetCore.DataProtection.AuthenticatedEncryption.ConfigurationModel.AuthenticatedEncryptorDescriptorDeserializer, Microsoft.AspNetCore.DataProtection, Culture=neutral, PublicKeyToken=adb9793829ddae60
2025-02-13 22:31:27.375 -05:00 [DBG] Opening CNG algorithm 'AES' from provider 'null' with chaining mode CBC.
2025-02-13 22:31:27.380 -05:00 [DBG] Opening CNG algorithm 'SHA256' from provider 'null' with HMAC.
2025-02-13 22:31:27.385 -05:00 [DBG] Using key {a85a9386-c5c5-4af5-8653-042df668f95b} as the default key.
2025-02-13 22:31:27.388 -05:00 [DBG] Key ring with default key {a85a9386-c5c5-4af5-8653-042df668f95b} was loaded during application startup.
2025-02-13 22:31:28.061 -05:00 [INF] Now listening on: https://localhost:7294
2025-02-13 22:31:28.064 -05:00 [INF] Now listening on: http://localhost:5004
2025-02-13 22:31:28.065 -05:00 [DBG] Loaded hosting startup assembly HotelBookingPlatform.API
2025-02-13 22:31:28.067 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.ApiEndpointDiscovery
2025-02-13 22:31:28.068 -05:00 [DBG] Loaded hosting startup assembly Microsoft.AspNetCore.Watch.BrowserRefresh
2025-02-13 22:31:28.071 -05:00 [DBG] Loaded hosting startup assembly Microsoft.WebTools.BrowserLink.Net
2025-02-13 22:31:28.169 -05:00 [DBG] Connection id "0HNACL08HMD8A" accepted.
2025-02-13 22:31:28.177 -05:00 [DBG] Connection id "0HNACL08HMD8A" started.
2025-02-13 22:31:28.197 -05:00 [DBG] Connection id "0HNACL08HMD8A" received FIN.
2025-02-13 22:31:28.213 -05:00 [DBG] Failed to authenticate HTTPS connection.
System.IO.IOException: Received an unexpected EOF or 0 bytes from the transport stream.
   at System.Net.Security.SslStream.ReceiveHandshakeFrameAsync[TIOAdapter](CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ForceAuthenticationAsync[TIOAdapter](Boolean receiveFirst, Byte[] reAuthenticationData, CancellationToken cancellationToken)
   at System.Net.Security.SslStream.ProcessAuthenticationWithTelemetryAsync(Boolean isAsync, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Server.Kestrel.Https.Internal.HttpsConnectionMiddleware.OnConnectionAsync(ConnectionContext context)
2025-02-13 22:31:28.301 -05:00 [DBG] Connection id "0HNACL08HMD8A" stopped.
2025-02-13 22:31:28.309 -05:00 [DBG] Connection id "0HNACL08HMD8A" sending FIN because: "The Socket transport's send loop completed gracefully."
2025-02-13 22:31:28.360 -05:00 [INF] Application started. Press Ctrl+C to shut down.
2025-02-13 22:31:28.361 -05:00 [INF] Hosting environment: Development
2025-02-13 22:31:28.363 -05:00 [INF] Content root path: C:\Users\jclay\OneDrive\Desktop\Extra\Projects\point\HotelBookingPlatform\HotelBookingPlatform.API
2025-02-13 22:31:28.364 -05:00 [DBG] Hosting started
2025-02-13 22:31:28.867 -05:00 [DBG] Connection id "0HNACL08HMD8B" accepted.
2025-02-13 22:31:28.894 -05:00 [DBG] Connection id "0HNACL08HMD8B" started.
2025-02-13 22:31:29.016 -05:00 [DBG] Connection 0HNACL08HMD8B established using the following protocol: "Tls13"
2025-02-13 22:31:29.172 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.html - null null
2025-02-13 22:31:29.470 -05:00 [DBG] Wildcard detected, all requests with hosts will be allowed.
2025-02-13 22:31:29.547 -05:00 [DBG] No candidates found for the request path '/swagger/index.html'
2025-02-13 22:31:29.550 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:31:29.811 -05:00 [DBG] Response markup is scheduled to include Browser Link script injection.
2025-02-13 22:31:29.907 -05:00 [DBG] Response markup is scheduled to include browser refresh script injection.
2025-02-13 22:31:30.029 -05:00 [DBG] Response markup was updated to include Browser Link script injection.
2025-02-13 22:31:30.085 -05:00 [DBG] Response markup was updated to include browser refresh script injection.
2025-02-13 22:31:30.095 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.html - 200 null text/html;charset=utf-8 938.3015ms
2025-02-13 22:31:30.404 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/index.js - null null
2025-02-13 22:31:30.409 -05:00 [DBG] No candidates found for the request path '/swagger/index.js'
2025-02-13 22:31:30.411 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:31:30.415 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/index.js - 200 null application/javascript;charset=utf-8 10.9858ms
2025-02-13 22:31:30.472 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - null null
2025-02-13 22:31:30.474 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/_vs/browserLink - null null
2025-02-13 22:31:30.494 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_framework/aspnetcore-browser-refresh.js - 200 13800 application/javascript; charset=utf-8 22.724ms
2025-02-13 22:31:30.556 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/_vs/browserLink - 200 null text/javascript; charset=UTF-8 82.1598ms
2025-02-13 22:31:31.048 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - null null
2025-02-13 22:31:31.059 -05:00 [DBG] No candidates found for the request path '/swagger/v1/swagger.json'
2025-02-13 22:31:31.060 -05:00 [DBG] Request did not match any endpoints
2025-02-13 22:31:31.243 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/swagger/v1/swagger.json - 200 null application/json;charset=utf-8 195.1952ms
2025-02-13 22:32:19.129 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/register - application/json 132
2025-02-13 22:32:19.158 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/register'
2025-02-13 22:32:19.165 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/register' is valid for the request path '/api/auth/register'
2025-02-13 22:32:19.168 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:32:19.173 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:32:19.175 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:32:19.260 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 22:32:19.264 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:32:19.303 -05:00 [INF] Route matched with {action = "Register", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RegisterAsync(HotelBookingPlatform.Domain.Helpers.RegisterModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 22:32:19.309 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:32:19.311 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:32:19.314 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:32:19.317 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:32:19.318 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:32:19.324 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:32:19.532 -05:00 [DBG] An 'IServiceProvider' was created for internal use by Entity Framework.
2025-02-13 22:32:19.571 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:32:19.593 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:32:19.597 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' using the name '' in request data ...
2025-02-13 22:32:19.600 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:32:19.611 -05:00 [DBG] Connection id "0HNACL08HMD8B", Request id "0HNACL08HMD8B:0000000B": started reading request body.
2025-02-13 22:32:19.612 -05:00 [DBG] Connection id "0HNACL08HMD8B", Request id "0HNACL08HMD8B:0000000B": done reading request body.
2025-02-13 22:32:19.633 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'
2025-02-13 22:32:19.635 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:32:19.637 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:32:19.639 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel' ...
2025-02-13 22:32:19.650 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RegisterModel'.
2025-02-13 22:32:20.800 -05:00 [DBG] The index {'BookingID'} was not created on entity type 'BookingRoom (Dictionary<string, object>)' as the properties are already covered by the index {'BookingID', 'RoomID'}.
2025-02-13 22:32:20.807 -05:00 [DBG] The index {'LocalUserId'} was not created on entity type 'RefreshToken' as the properties are already covered by the index {'LocalUserId', 'Id'}.
2025-02-13 22:32:20.811 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserRole<string>' as the properties are already covered by the index {'UserId', 'RoleId'}.
2025-02-13 22:32:20.813 -05:00 [DBG] The index {'UserId'} was not created on entity type 'IdentityUserToken<string>' as the properties are already covered by the index {'UserId', 'LoginProvider', 'Name'}.
2025-02-13 22:32:20.815 -05:00 [DBG] The index {'AmenityID'} was not created on entity type 'RoomClassAmenity (Dictionary<string, object>)' as the properties are already covered by the index {'AmenityID', 'RoomClassID'}.
2025-02-13 22:32:21.039 -05:00 [DBG] The property 'Discount.RoomClassID' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:32:21.041 -05:00 [DBG] The property 'RefreshToken.LocalUserId' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:32:21.043 -05:00 [DBG] The property 'RefreshToken.Id' was created in shadow state because there are no eligible CLR members with a matching name.
2025-02-13 22:32:21.226 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:32:21.326 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .SingleOrDefault(u => u.NormalizedEmail == __normalizedEmail_0)'
2025-02-13 22:32:21.395 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 22:32:21.994 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedEmail == @__normalizedEmail_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:32:22.075 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:32:22.129 -05:00 [DBG] Created DbConnection. (50ms).
2025-02-13 22:32:22.137 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:22.385 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:22.395 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:22.409 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (6ms).
2025-02-13 22:32:22.422 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (28ms).
2025-02-13 22:32:22.440 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:32:22.600 -05:00 [INF] Executed DbCommand (166ms) [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:32:22.612 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:22.627 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 15ms reading results.
2025-02-13 22:32:22.635 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:22.646 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (12ms).
2025-02-13 22:32:22.812 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .FirstOrDefault(u => u.NormalizedUserName == __normalizedUserName_0)'
2025-02-13 22:32:22.815 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 22:32:22.861 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(1) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedUserName == @__normalizedUserName_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r.LocalUserId, r.Id, r.CreatedOn, r.ExpiresOn, r.RevokedOn, r.Token
            FROM 
            (
                SELECT TOP(1) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE a.NormalizedUserName == @__normalizedUserName_0
            ) AS a0
            LEFT JOIN RefreshToken AS r ON a0.Id == r.LocalUserId
            ORDER BY a0.Id ASC, r.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:32:22.893 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:22.895 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:22.897 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:22.898 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:22.902 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (4ms).
2025-02-13 22:32:22.904 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:32:22.925 -05:00 [INF] Executed DbCommand (21ms) [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:32:22.928 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:22.930 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 2ms reading results.
2025-02-13 22:32:22.934 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:22.937 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (4ms).
2025-02-13 22:32:23.128 -05:00 [DBG] Context 'AppDbContext' started tracking 'LocalUser' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:23.136 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:32:23.140 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:32:23.171 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:32:23.281 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.285 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.288 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.289 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:23.291 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:23.292 -05:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?' (DbType = Int32), @p2='?', @p3='?', @p4='?' (DbType = Boolean), @p5='?', @p6='?', @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime), @p9='?', @p10='?', @p11='?', @p12='?', @p13='?' (DbType = Boolean), @p14='?', @p15='?' (DbType = Boolean), @p16='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUsers" ("Id", "AccessFailedCount", "ConcurrencyStamp", "Email", "EmailConfirmed", "FirstName", "LastName", "LockoutEnabled", "LockoutEnd", "NormalizedEmail", "NormalizedUserName", "PasswordHash", "PhoneNumber", "PhoneNumberConfirmed", "SecurityStamp", "TwoFactorEnabled", "UserName")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);
2025-02-13 22:32:23.312 -05:00 [INF] Executed DbCommand (19ms) [Parameters=[@p0='?', @p1='?' (DbType = Int32), @p2='?', @p3='?', @p4='?' (DbType = Boolean), @p5='?', @p6='?', @p7='?' (DbType = Boolean), @p8='?' (DbType = DateTime), @p9='?', @p10='?', @p11='?', @p12='?', @p13='?' (DbType = Boolean), @p14='?', @p15='?' (DbType = Boolean), @p16='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUsers" ("Id", "AccessFailedCount", "ConcurrencyStamp", "Email", "EmailConfirmed", "FirstName", "LastName", "LockoutEnabled", "LockoutEnd", "NormalizedEmail", "NormalizedUserName", "PasswordHash", "PhoneNumber", "PhoneNumberConfirmed", "SecurityStamp", "TwoFactorEnabled", "UserName")
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6, @p7, @p8, @p9, @p10, @p11, @p12, @p13, @p14, @p15, @p16);
2025-02-13 22:32:23.322 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.324 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 9ms reading results.
2025-02-13 22:32:23.328 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.329 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:23.351 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:23.356 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 1 entities written to the database.
2025-02-13 22:32:23.361 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityRole>()
    .FirstOrDefault(r => r.NormalizedName == __normalizedName_0)'
2025-02-13 22:32:23.373 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<IdentityRole>(
    asyncEnumerable: SingleQueryingEnumerable.Create<IdentityRole>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(1) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedName_0) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(1) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedName_0, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            IdentityRole entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                IdentityRole instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(IdentityRole);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: IdentityRole.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (IdentityRole)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]: 
                            {
                                return 
                                {
                                    IdentityRole instance;
                                    instance = new IdentityRole();
                                    instance.<Id>k__BackingField = dataReader.GetString(0);
                                    instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(1) ? default(string) : dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                    instance.<NormalizedName>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(IdentityRole)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            return entity;
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:32:23.379 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.381 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.382 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.385 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:23.386 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (4ms).
2025-02-13 22:32:23.387 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedName_0
LIMIT 1
2025-02-13 22:32:23.392 -05:00 [INF] Executed DbCommand (4ms) [Parameters=[@__normalizedName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedName_0
LIMIT 1
2025-02-13 22:32:23.396 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.397 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:32:23.398 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.401 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:32:23.415 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.418 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.419 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.420 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-02-13 22:32:23.421 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:23.423 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedName_0
LIMIT 1
2025-02-13 22:32:23.427 -05:00 [INF] Executed DbCommand (4ms) [Parameters=[@__normalizedName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedName_0
LIMIT 1
2025-02-13 22:32:23.430 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.432 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:32:23.435 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.437 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:23.460 -05:00 [DBG] Context 'AppDbContext' started tracking 'IdentityRole' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:23.463 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:32:23.465 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:32:23.475 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:32:23.480 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.482 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.486 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.488 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:23.490 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:32:23.492 -05:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?', @p2='?', @p3='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetRoles" ("Id", "ConcurrencyStamp", "Name", "NormalizedName")
VALUES (@p0, @p1, @p2, @p3);
2025-02-13 22:32:23.501 -05:00 [INF] Executed DbCommand (7ms) [Parameters=[@p0='?', @p1='?', @p2='?', @p3='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetRoles" ("Id", "ConcurrencyStamp", "Name", "NormalizedName")
VALUES (@p0, @p1, @p2, @p3);
2025-02-13 22:32:23.506 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.508 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:32:23.509 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.510 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:23.512 -05:00 [DBG] An entity of type 'IdentityRole' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:23.514 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 1 entities written to the database.
2025-02-13 22:32:23.525 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityRole>()
    .SingleOrDefault(r => r.NormalizedName == __normalizedRoleName_0)'
2025-02-13 22:32:23.535 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<IdentityRole>(
    asyncEnumerable: SingleQueryingEnumerable.Create<IdentityRole>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(2) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedRoleName_0) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityRole.Id (string) Required PK AfterSave:Throw, 0], [Property: IdentityRole.ConcurrencyStamp (string) Concurrency, 1], [Property: IdentityRole.Name (string) MaxLength(256), 2], [Property: IdentityRole.NormalizedName (string) Index MaxLength(256), 3] }
            SELECT TOP(2) a.Id, a.ConcurrencyStamp, a.Name, a.NormalizedName
            FROM AspNetRoles AS a
            WHERE a.NormalizedName == @__normalizedRoleName_0, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            IdentityRole entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                IdentityRole instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(IdentityRole);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: IdentityRole.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole").FindPrimaryKey()], 
                    keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (IdentityRole)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]: 
                            {
                                return 
                                {
                                    IdentityRole instance;
                                    instance = new IdentityRole();
                                    instance.<Id>k__BackingField = dataReader.GetString(0);
                                    instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(1) ? default(string) : dataReader.GetString(1);
                                    instance.<Name>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                    instance.<NormalizedName>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: IdentityRole | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityRole")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(IdentityRole)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            return entity;
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:32:23.541 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.542 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.544 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.545 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-02-13 22:32:23.546 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:23.548 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:32:23.554 -05:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:32:23.564 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.568 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 10ms reading results.
2025-02-13 22:32:23.569 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.570 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:23.591 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityUserRole<string>>()
    .FirstOrDefault(e => EF.Property<string>(e, "UserId") == __p_0 && EF.Property<string>(e, "RoleId") == __p_1)'
2025-02-13 22:32:23.605 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<IdentityUserRole<string>>(
    asyncEnumerable: SingleQueryingEnumerable.Create<IdentityUserRole<string>>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityUserRole<string>.UserId (string) Required PK FK AfterSave:Throw, 0], [Property: IdentityUserRole<string>.RoleId (string) Required PK FK Index AfterSave:Throw, 1] }
            SELECT TOP(1) a.UserId, a.RoleId
            FROM AspNetUserRoles AS a
            WHERE (a.UserId == @__p_0) && (a.RoleId == @__p_1)) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Projection Mapping:
                EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: IdentityUserRole<string>.UserId (string) Required PK FK AfterSave:Throw, 0], [Property: IdentityUserRole<string>.RoleId (string) Required PK FK Index AfterSave:Throw, 1] }
            SELECT TOP(1) a.UserId, a.RoleId
            FROM AspNetUserRoles AS a
            WHERE (a.UserId == @__p_0) && (a.RoleId == @__p_1), 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            IdentityUserRole<string> entity;
            entity = 
            {
                MaterializationContext materializationContext1;
                IEntityType entityType1;
                IdentityUserRole<string> instance1;
                InternalEntityEntry entry1;
                bool hasNullKey1;
                materializationContext1 = new MaterializationContext(
                    [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                    queryContext.Context
                );
                instance1 = default(IdentityUserRole<string>);
                entry1 = queryContext.TryGetEntry(
                    key: [LIFTABLE Constant: Key: IdentityUserRole<string>.UserId, IdentityUserRole<string>.RoleId PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>").FindPrimaryKey()], 
                    keyValues: new object[]
                    { 
                        (object)dataReader.GetString(0), 
                        (object)dataReader.GetString(1) 
                    }, 
                    throwOnNullKey: True, 
                    hasNullKey: hasNullKey1);
                !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                {
                    entityType1 = entry1.EntityType;
                    return instance1 = (IdentityUserRole<string>)entry1.Entity;
                } : 
                {
                    ISnapshot shadowSnapshot1;
                    shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                    entityType1 = [LIFTABLE Constant: EntityType: IdentityUserRole<string> | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")];
                    instance1 = switch (entityType1)
                    {
                        case [LIFTABLE Constant: EntityType: IdentityUserRole<string> | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")]: 
                            {
                                return 
                                {
                                    IdentityUserRole<string> instance;
                                    instance = new IdentityUserRole<string>();
                                    instance.<UserId>k__BackingField = dataReader.GetString(0);
                                    instance.<RoleId>k__BackingField = dataReader.GetString(1);
                                    (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                        context: materializationContext1.Context, 
                                        entity: instance, 
                                        queryTrackingBehavior: TrackAll, 
                                        structuralType: [LIFTABLE Constant: EntityType: IdentityUserRole<string> | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>")]) : default(void);
                                    return instance;
                                }}
                        default: 
                            default(IdentityUserRole<string>)
                    }
                    ;
                    entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                        entityType: entityType1, 
                        entity: instance1, 
                        snapshot: shadowSnapshot1);
                    return instance1;
                } : default(void);
                return instance1;
            };
            return entity;
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:32:23.614 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.615 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.618 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.619 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:23.621 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:23.622 -05:00 [DBG] Executing DbCommand [Parameters=[@__p_0='?', @__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."UserId", a."RoleId"
FROM "AspNetUserRoles" AS a
WHERE a."UserId" = @__p_0 AND a."RoleId" = @__p_1
LIMIT 1
2025-02-13 22:32:23.627 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__p_0='?', @__p_1='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."UserId", a."RoleId"
FROM "AspNetUserRoles" AS a
WHERE a."UserId" = @__p_0 AND a."RoleId" = @__p_1
LIMIT 1
2025-02-13 22:32:23.630 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.632 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:32:23.636 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.637 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:23.642 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.644 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.645 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.646 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-02-13 22:32:23.647 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:23.649 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:32:23.655 -05:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedRoleName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ConcurrencyStamp", a."Name", a."NormalizedName"
FROM "AspNetRoles" AS a
WHERE a."NormalizedName" = @__normalizedRoleName_0
LIMIT 2
2025-02-13 22:32:23.658 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.659 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:32:23.661 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.662 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:23.678 -05:00 [DBG] Context 'AppDbContext' started tracking 'IdentityUserRole' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:23.681 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.684 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.686 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.687 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:23.688 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:23.689 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:32:23.695 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:32:23.707 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.708 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 10ms reading results.
2025-02-13 22:32:23.709 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.711 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:23.720 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Unchanged"' to '"Modified"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:23.721 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:32:23.723 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:32:23.724 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:32:23.752 -05:00 [DBG] Executing 2 update commands as a batch.
2025-02-13 22:32:23.758 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.760 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.764 -05:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-02-13 22:32:23.775 -05:00 [DBG] Began transaction with isolation level 'ReadCommitted'.
2025-02-13 22:32:23.778 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.780 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:23.784 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (6ms).
2025-02-13 22:32:23.787 -05:00 [DBG] Executing DbCommand [Parameters=[@p0='?', @p1='?', @p18='?', @p2='?' (DbType = Int32), @p3='?', @p19='?', @p4='?', @p5='?' (DbType = Boolean), @p6='?', @p7='?', @p8='?' (DbType = Boolean), @p9='?' (DbType = DateTime), @p10='?', @p11='?', @p12='?', @p13='?', @p14='?' (DbType = Boolean), @p15='?', @p16='?' (DbType = Boolean), @p17='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUserRoles" ("RoleId", "UserId")
VALUES (@p0, @p1);
UPDATE "AspNetUsers" SET "AccessFailedCount" = @p2, "ConcurrencyStamp" = @p3, "Email" = @p4, "EmailConfirmed" = @p5, "FirstName" = @p6, "LastName" = @p7, "LockoutEnabled" = @p8, "LockoutEnd" = @p9, "NormalizedEmail" = @p10, "NormalizedUserName" = @p11, "PasswordHash" = @p12, "PhoneNumber" = @p13, "PhoneNumberConfirmed" = @p14, "SecurityStamp" = @p15, "TwoFactorEnabled" = @p16, "UserName" = @p17
WHERE "Id" = @p18 AND "ConcurrencyStamp" = @p19;
2025-02-13 22:32:23.795 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[@p0='?', @p1='?', @p18='?', @p2='?' (DbType = Int32), @p3='?', @p19='?', @p4='?', @p5='?' (DbType = Boolean), @p6='?', @p7='?', @p8='?' (DbType = Boolean), @p9='?' (DbType = DateTime), @p10='?', @p11='?', @p12='?', @p13='?', @p14='?' (DbType = Boolean), @p15='?', @p16='?' (DbType = Boolean), @p17='?'], CommandType='"Text"', CommandTimeout='30']
INSERT INTO "AspNetUserRoles" ("RoleId", "UserId")
VALUES (@p0, @p1);
UPDATE "AspNetUsers" SET "AccessFailedCount" = @p2, "ConcurrencyStamp" = @p3, "Email" = @p4, "EmailConfirmed" = @p5, "FirstName" = @p6, "LastName" = @p7, "LockoutEnabled" = @p8, "LockoutEnd" = @p9, "NormalizedEmail" = @p10, "NormalizedUserName" = @p11, "PasswordHash" = @p12, "PhoneNumber" = @p13, "PhoneNumberConfirmed" = @p14, "SecurityStamp" = @p15, "TwoFactorEnabled" = @p16, "UserName" = @p17
WHERE "Id" = @p18 AND "ConcurrencyStamp" = @p19;
2025-02-13 22:32:23.801 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.803 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 2ms reading results.
2025-02-13 22:32:23.808 -05:00 [DBG] Committing transaction.
2025-02-13 22:32:23.823 -05:00 [DBG] Committed transaction.
2025-02-13 22:32:23.829 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.832 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:32:23.839 -05:00 [DBG] Disposing transaction.
2025-02-13 22:32:23.841 -05:00 [DBG] An entity of type 'IdentityUserRole' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:23.845 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Modified"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:23.847 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 2 entities written to the database.
2025-02-13 22:32:23.868 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityUserClaim<string>>()
    .Where(uc => uc.UserId.Equals(__user_Id_0))
    .Select(c => c.ToClaim())'
2025-02-13 22:32:23.880 -05:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<Claim>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: IdentityUserClaim<string>.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: IdentityUserClaim<string>.ClaimType (string), 1], [Property: IdentityUserClaim<string>.ClaimValue (string), 2], [Property: IdentityUserClaim<string>.UserId (string) Required FK Index, 3] }
        SELECT a.Id, a.ClaimType, a.ClaimValue, a.UserId
        FROM AspNetUserClaims AS a
        WHERE a.UserId == @__user_Id_0) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Client Projections:
            0 -> Dictionary<IProperty, int> { [Property: IdentityUserClaim<string>.Id (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: IdentityUserClaim<string>.ClaimType (string), 1], [Property: IdentityUserClaim<string>.ClaimValue (string), 2], [Property: IdentityUserClaim<string>.UserId (string) Required FK Index, 3] }
        SELECT a.Id, a.ClaimType, a.ClaimValue, a.UserId
        FROM AspNetUserClaims AS a
        WHERE a.UserId == @__user_Id_0, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        IdentityUserClaim<string> entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            IdentityUserClaim<string> instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(IdentityUserClaim<string>);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: IdentityUserClaim<string>.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (IdentityUserClaim<string>)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: IdentityUserClaim<string> | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: IdentityUserClaim<string> | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")]: 
                        {
                            return 
                            {
                                IdentityUserClaim<string> instance;
                                instance = new IdentityUserClaim<string>();
                                instance.<Id>k__BackingField = dataReader.GetInt32(0);
                                instance.<ClaimType>k__BackingField = dataReader.IsDBNull(1) ? default(string) : dataReader.GetString(1);
                                instance.<ClaimValue>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                instance.<UserId>k__BackingField = dataReader.GetString(3);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: IdentityUserClaim<string> | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(IdentityUserClaim<string>)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity.ToClaim();
    }, 
    contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-02-13 22:32:23.892 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.897 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.908 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:23.909 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:23.912 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (4ms).
2025-02-13 22:32:23.922 -05:00 [DBG] Executing DbCommand [Parameters=[@__user_Id_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ClaimType", a."ClaimValue", a."UserId"
FROM "AspNetUserClaims" AS a
WHERE a."UserId" = @__user_Id_0
2025-02-13 22:32:23.931 -05:00 [INF] Executed DbCommand (9ms) [Parameters=[@__user_Id_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ClaimType", a."ClaimValue", a."UserId"
FROM "AspNetUserClaims" AS a
WHERE a."UserId" = @__user_Id_0
2025-02-13 22:32:23.940 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.943 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 4ms reading results.
2025-02-13 22:32:23.946 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.947 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:23.963 -05:00 [DBG] Compiling query expression: 
'DbSet<IdentityUserRole<string>>()
    .Join(
        inner: DbSet<IdentityRole>(), 
        outerKeySelector: userRole => userRole.RoleId, 
        innerKeySelector: role => role.Id, 
        resultSelector: (userRole, role) => new { 
            userRole = userRole, 
            role = role
         })
    .Where(<>h__TransparentIdentifier0 => <>h__TransparentIdentifier0.userRole.UserId.Equals(__userId_0))
    .Select(<>h__TransparentIdentifier0 => <>h__TransparentIdentifier0.role.Name)'
2025-02-13 22:32:23.991 -05:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<string>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> 0
        SELECT a0.Name
        FROM AspNetUserRoles AS a
        INNER JOIN AspNetRoles AS a0 ON a.RoleId == a0.Id
        WHERE a.UserId == @__userId_0) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> 0
        SELECT a0.Name
        FROM AspNetUserRoles AS a
        INNER JOIN AspNetRoles AS a0 ON a.RoleId == a0.Id
        WHERE a.UserId == @__userId_0, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        string value1;
        value1 = dataReader.IsDBNull(0) ? default(string) : dataReader.GetString(0);
        return value1;
    }, 
    contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-02-13 22:32:23.996 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:23.998 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.003 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:24.005 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:24.007 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:32:24.008 -05:00 [DBG] Executing DbCommand [Parameters=[@__userId_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Name"
FROM "AspNetUserRoles" AS a
INNER JOIN "AspNetRoles" AS a0 ON a."RoleId" = a0."Id"
WHERE a."UserId" = @__userId_0
2025-02-13 22:32:24.014 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__userId_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Name"
FROM "AspNetUserRoles" AS a
INNER JOIN "AspNetRoles" AS a0 ON a."RoleId" = a0."Id"
WHERE a."UserId" = @__userId_0
2025-02-13 22:32:24.022 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.023 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 2ms reading results.
2025-02-13 22:32:24.025 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.027 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:24.042 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.044 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.046 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:24.047 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:24.057 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (11ms).
2025-02-13 22:32:24.059 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:32:24.065 -05:00 [INF] Executed DbCommand (6ms) [Parameters=[@__normalizedUserName_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedUserName" = @__normalizedUserName_0
    LIMIT 1
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:32:24.071 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.072 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:32:24.074 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.076 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:32:24.077 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Unchanged"' to '"Modified"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:24.080 -05:00 [DBG] SaveChanges starting for 'AppDbContext'.
2025-02-13 22:32:24.084 -05:00 [DBG] DetectChanges starting for 'AppDbContext'.
2025-02-13 22:32:24.093 -05:00 [DBG] 1 entities were added and 0 entities were removed from navigation 'LocalUser.RefreshTokens'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:24.114 -05:00 [DBG] 'AppDbContext' generated a temporary value for the property 'RefreshToken.Id'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:24.147 -05:00 [DBG] Context 'AppDbContext' started tracking 'RefreshToken' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:24.152 -05:00 [DBG] DetectChanges completed for 'AppDbContext'.
2025-02-13 22:32:24.161 -05:00 [DBG] Executing 2 update commands as a batch.
2025-02-13 22:32:24.162 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.164 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.170 -05:00 [DBG] Beginning transaction with isolation level 'Unspecified'.
2025-02-13 22:32:24.171 -05:00 [DBG] Began transaction with isolation level 'ReadCommitted'.
2025-02-13 22:32:24.173 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:32:24.174 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:32:24.176 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:32:24.177 -05:00 [DBG] Executing DbCommand [Parameters=[@p16='?', @p0='?' (DbType = Int32), @p1='?', @p17='?', @p2='?', @p3='?' (DbType = Boolean), @p4='?', @p5='?', @p6='?' (DbType = Boolean), @p7='?' (DbType = DateTime), @p8='?', @p9='?', @p10='?', @p11='?', @p12='?' (DbType = Boolean), @p13='?', @p14='?' (DbType = Boolean), @p15='?', @p18='?', @p19='?' (DbType = DateTime), @p20='?' (DbType = DateTime), @p21='?' (DbType = DateTime), @p22='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "AccessFailedCount" = @p0, "ConcurrencyStamp" = @p1, "Email" = @p2, "EmailConfirmed" = @p3, "FirstName" = @p4, "LastName" = @p5, "LockoutEnabled" = @p6, "LockoutEnd" = @p7, "NormalizedEmail" = @p8, "NormalizedUserName" = @p9, "PasswordHash" = @p10, "PhoneNumber" = @p11, "PhoneNumberConfirmed" = @p12, "SecurityStamp" = @p13, "TwoFactorEnabled" = @p14, "UserName" = @p15
WHERE "Id" = @p16 AND "ConcurrencyStamp" = @p17;
INSERT INTO "RefreshToken" ("LocalUserId", "CreatedOn", "ExpiresOn", "RevokedOn", "Token")
VALUES (@p18, @p19, @p20, @p21, @p22)
RETURNING "Id";
2025-02-13 22:32:24.189 -05:00 [INF] Executed DbCommand (12ms) [Parameters=[@p16='?', @p0='?' (DbType = Int32), @p1='?', @p17='?', @p2='?', @p3='?' (DbType = Boolean), @p4='?', @p5='?', @p6='?' (DbType = Boolean), @p7='?' (DbType = DateTime), @p8='?', @p9='?', @p10='?', @p11='?', @p12='?' (DbType = Boolean), @p13='?', @p14='?' (DbType = Boolean), @p15='?', @p18='?', @p19='?' (DbType = DateTime), @p20='?' (DbType = DateTime), @p21='?' (DbType = DateTime), @p22='?'], CommandType='"Text"', CommandTimeout='30']
UPDATE "AspNetUsers" SET "AccessFailedCount" = @p0, "ConcurrencyStamp" = @p1, "Email" = @p2, "EmailConfirmed" = @p3, "FirstName" = @p4, "LastName" = @p5, "LockoutEnabled" = @p6, "LockoutEnd" = @p7, "NormalizedEmail" = @p8, "NormalizedUserName" = @p9, "PasswordHash" = @p10, "PhoneNumber" = @p11, "PhoneNumberConfirmed" = @p12, "SecurityStamp" = @p13, "TwoFactorEnabled" = @p14, "UserName" = @p15
WHERE "Id" = @p16 AND "ConcurrencyStamp" = @p17;
INSERT INTO "RefreshToken" ("LocalUserId", "CreatedOn", "ExpiresOn", "RevokedOn", "Token")
VALUES (@p18, @p19, @p20, @p21, @p22)
RETURNING "Id";
2025-02-13 22:32:24.206 -05:00 [DBG] The foreign key property 'RefreshToken.Id' was detected as changed. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see property values.
2025-02-13 22:32:24.212 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.213 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 20ms reading results.
2025-02-13 22:32:24.221 -05:00 [DBG] Committing transaction.
2025-02-13 22:32:24.227 -05:00 [DBG] Committed transaction.
2025-02-13 22:32:24.229 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.231 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:32:24.238 -05:00 [DBG] Disposing transaction.
2025-02-13 22:32:24.240 -05:00 [DBG] An entity of type 'RefreshToken' tracked by 'AppDbContext' changed state from '"Added"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:24.244 -05:00 [DBG] An entity of type 'LocalUser' tracked by 'AppDbContext' changed state from '"Modified"' to '"Unchanged"'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:32:24.248 -05:00 [DBG] SaveChanges completed for 'AppDbContext' with 2 entities written to the database.
2025-02-13 22:32:24.324 -05:00 [DBG] List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter"]
2025-02-13 22:32:24.328 -05:00 [DBG] No information found on request to perform content negotiation.
2025-02-13 22:32:24.329 -05:00 [DBG] Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.
2025-02-13 22:32:24.330 -05:00 [DBG] Attempting to select the first formatter in the output formatters list which can write the result.
2025-02-13 22:32:24.334 -05:00 [DBG] Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response.
2025-02-13 22:32:24.337 -05:00 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType6`4[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[HotelBookingPlatform.Domain.Helpers.AuthModel, HotelBookingPlatform.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-02-13 22:32:24.375 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API) in 5046.967ms
2025-02-13 22:32:24.377 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.RegisterAsync (HotelBookingPlatform.API)'
2025-02-13 22:32:24.388 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:32:24.407 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:32:24.413 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (6ms).
2025-02-13 22:32:24.420 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/register - 200 null application/json; charset=utf-8 5291.217ms
2025-02-13 22:33:08.384 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/auth/login - application/json 67
2025-02-13 22:33:08.405 -05:00 [DBG] 1 candidate(s) found for the request path '/api/auth/login'
2025-02-13 22:33:08.408 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.UserController.LoginAsync (HotelBookingPlatform.API)' with route pattern 'api/auth/login' is valid for the request path '/api/auth/login'
2025-02-13 22:33:08.411 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.UserController.LoginAsync (HotelBookingPlatform.API)'
2025-02-13 22:33:08.428 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:33:08.430 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:33:08.431 -05:00 [DBG] AuthenticationScheme: Bearer was not authenticated.
2025-02-13 22:33:08.433 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.UserController.LoginAsync (HotelBookingPlatform.API)'
2025-02-13 22:33:08.439 -05:00 [INF] Route matched with {action = "Login", controller = "User"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] LoginAsync(HotelBookingPlatform.Domain.Helpers.LoginModel) on controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API).
2025-02-13 22:33:08.443 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:33:08.444 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:33:08.446 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:33:08.448 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:33:08.449 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:33:08.451 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:33:08.456 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.UserController (HotelBookingPlatform.API)
2025-02-13 22:33:08.458 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.LoginModel' ...
2025-02-13 22:33:08.460 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.LoginModel' using the name '' in request data ...
2025-02-13 22:33:08.462 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:33:08.465 -05:00 [DBG] Connection id "0HNACL08HMD8B", Request id "0HNACL08HMD8B:0000000D": started reading request body.
2025-02-13 22:33:08.467 -05:00 [DBG] Connection id "0HNACL08HMD8B", Request id "0HNACL08HMD8B:0000000D": done reading request body.
2025-02-13 22:33:08.468 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.LoginModel'
2025-02-13 22:33:08.470 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.LoginModel'.
2025-02-13 22:33:08.471 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.LoginModel'.
2025-02-13 22:33:08.472 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.LoginModel' ...
2025-02-13 22:33:08.476 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.LoginModel'.
2025-02-13 22:33:08.550 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:33:08.554 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:33:08.555 -05:00 [DBG] Created DbConnection. (1ms).
2025-02-13 22:33:08.558 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.560 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.562 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:33:08.563 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:33:08.565 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (3ms).
2025-02-13 22:33:08.567 -05:00 [DBG] Executing DbCommand [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:33:08.577 -05:00 [INF] Executed DbCommand (10ms) [Parameters=[@__normalizedEmail_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r."LocalUserId", r."Id", r."CreatedOn", r."ExpiresOn", r."RevokedOn", r."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE a."NormalizedEmail" = @__normalizedEmail_0
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r ON a0."Id" = r."LocalUserId"
ORDER BY a0."Id", r."LocalUserId"
2025-02-13 22:33:08.591 -05:00 [DBG] Context 'AppDbContext' started tracking 'LocalUser' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:33:08.600 -05:00 [DBG] Context 'AppDbContext' started tracking 'RefreshToken' entity. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
2025-02-13 22:33:08.603 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.605 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 17ms reading results.
2025-02-13 22:33:08.608 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.609 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:33:08.729 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.730 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.732 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:33:08.734 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:33:08.735 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:33:08.736 -05:00 [DBG] Executing DbCommand [Parameters=[@__user_Id_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ClaimType", a."ClaimValue", a."UserId"
FROM "AspNetUserClaims" AS a
WHERE a."UserId" = @__user_Id_0
2025-02-13 22:33:08.742 -05:00 [INF] Executed DbCommand (6ms) [Parameters=[@__user_Id_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a."Id", a."ClaimType", a."ClaimValue", a."UserId"
FROM "AspNetUserClaims" AS a
WHERE a."UserId" = @__user_Id_0
2025-02-13 22:33:08.745 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.747 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:33:08.748 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.750 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:33:08.752 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.754 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.757 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:33:08.758 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (1ms).
2025-02-13 22:33:08.759 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:33:08.764 -05:00 [DBG] Executing DbCommand [Parameters=[@__userId_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Name"
FROM "AspNetUserRoles" AS a
INNER JOIN "AspNetRoles" AS a0 ON a."RoleId" = a0."Id"
WHERE a."UserId" = @__userId_0
2025-02-13 22:33:08.769 -05:00 [INF] Executed DbCommand (5ms) [Parameters=[@__userId_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Name"
FROM "AspNetUserRoles" AS a
INNER JOIN "AspNetRoles" AS a0 ON a."RoleId" = a0."Id"
WHERE a."UserId" = @__userId_0
2025-02-13 22:33:08.771 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.775 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 3ms reading results.
2025-02-13 22:33:08.777 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.779 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:33:08.781 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.783 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.785 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:33:08.786 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-02-13 22:33:08.787 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:33:08.788 -05:00 [DBG] Executing DbCommand [Parameters=[@__userId_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Name"
FROM "AspNetUserRoles" AS a
INNER JOIN "AspNetRoles" AS a0 ON a."RoleId" = a0."Id"
WHERE a."UserId" = @__userId_0
2025-02-13 22:33:08.795 -05:00 [INF] Executed DbCommand (7ms) [Parameters=[@__userId_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Name"
FROM "AspNetUserRoles" AS a
INNER JOIN "AspNetRoles" AS a0 ON a."RoleId" = a0."Id"
WHERE a."UserId" = @__userId_0
2025-02-13 22:33:08.798 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.799 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:33:08.800 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.802 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:33:08.807 -05:00 [DBG] List of registered output formatters, in the following order: ["Microsoft.AspNetCore.Mvc.Formatters.HttpNoContentOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StringOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.StreamOutputFormatter","Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter"]
2025-02-13 22:33:08.811 -05:00 [DBG] No information found on request to perform content negotiation.
2025-02-13 22:33:08.812 -05:00 [DBG] Attempting to select an output formatter without using a content type as no explicit content types were specified for the response.
2025-02-13 22:33:08.812 -05:00 [DBG] Attempting to select the first formatter in the output formatters list which can write the result.
2025-02-13 22:33:08.813 -05:00 [DBG] Selected output formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter' and content type 'application/json' to write the response.
2025-02-13 22:33:08.815 -05:00 [INF] Executing OkObjectResult, writing value of type '<>f__AnonymousType6`4[[System.Int32, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Boolean, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.String, System.Private.CoreLib, Version=8.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[HotelBookingPlatform.Domain.Helpers.AuthModel, HotelBookingPlatform.Domain, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2025-02-13 22:33:08.817 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.UserController.LoginAsync (HotelBookingPlatform.API) in 366.0026ms
2025-02-13 22:33:08.819 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.UserController.LoginAsync (HotelBookingPlatform.API)'
2025-02-13 22:33:08.821 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:33:08.827 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:33:08.830 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (3ms).
2025-02-13 22:33:08.834 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/auth/login - 200 null application/json; charset=utf-8 450.4214ms
2025-02-13 22:34:07.784 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/Token/revokeToken - application/json 578
2025-02-13 22:34:07.804 -05:00 [DBG] 1 candidate(s) found for the request path '/api/Token/revokeToken'
2025-02-13 22:34:07.806 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API)' with route pattern 'api/Token/revokeToken' is valid for the request path '/api/Token/revokeToken'
2025-02-13 22:34:07.808 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API)'
2025-02-13 22:34:07.809 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:34:07.810 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:34:07.884 -05:00 [DBG] Successfully validated the token.
2025-02-13 22:34:07.889 -05:00 [DBG] AuthenticationScheme: Bearer was successfully authenticated.
2025-02-13 22:34:07.892 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API)'
2025-02-13 22:34:07.902 -05:00 [INF] Route matched with {action = "RevokeToken", controller = "Token"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RevokeToken(HotelBookingPlatform.Domain.Helpers.RevokeToken) on controller HotelBookingPlatform.API.Controllers.TokenController (HotelBookingPlatform.API).
2025-02-13 22:34:07.906 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:34:07.908 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:34:07.909 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:34:07.911 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:34:07.912 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:34:07.914 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.TokenController (HotelBookingPlatform.API)
2025-02-13 22:34:07.936 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.TokenController (HotelBookingPlatform.API)
2025-02-13 22:34:07.937 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken' ...
2025-02-13 22:34:07.939 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken' using the name '' in request data ...
2025-02-13 22:34:07.941 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:34:07.943 -05:00 [DBG] Connection id "0HNACL08HMD8B", Request id "0HNACL08HMD8B:0000000F": started reading request body.
2025-02-13 22:34:07.945 -05:00 [DBG] Connection id "0HNACL08HMD8B", Request id "0HNACL08HMD8B:0000000F": done reading request body.
2025-02-13 22:34:07.947 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RevokeToken'
2025-02-13 22:34:07.951 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken'.
2025-02-13 22:34:07.952 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken'.
2025-02-13 22:34:07.954 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken' ...
2025-02-13 22:34:07.956 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken'.
2025-02-13 22:34:07.976 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:34:07.979 -05:00 [DBG] Compiling query expression: 
'DbSet<LocalUser>()
    .SingleOrDefault(u => u.RefreshTokens
        .Any(t => t.Token == __token_0))'
2025-02-13 22:34:07.987 -05:00 [DBG] Including navigation: 'LocalUser.RefreshTokens'.
2025-02-13 22:34:08.018 -05:00 [DBG] Generated query execution expression: 
'queryContext => ShapedQueryCompilingExpressionVisitor.SingleOrDefaultAsync<LocalUser>(
    asyncEnumerable: SingleQueryingEnumerable.Create<LocalUser>(
        relationalQueryContext: (RelationalQueryContext)queryContext, 
        relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r0.LocalUserId, r0.Id, r0.CreatedOn, r0.ExpiresOn, r0.RevokedOn, r0.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE EXISTS (
                    SELECT 1
                    FROM RefreshToken AS r
                    WHERE ((a.Id != NULL) && (a.Id == r.LocalUserId)) && (r.Token == @__token_0))
            ) AS a0
            LEFT JOIN RefreshToken AS r0 ON a0.Id == r0.LocalUserId
            ORDER BY a0.Id ASC, r0.LocalUserId ASC) | Resolver: c => new RelationalCommandCache(
            c.Dependencies.MemoryCache, 
            c.RelationalDependencies.QuerySqlGeneratorFactory, 
            c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
            Client Projections:
                0 -> Dictionary<IProperty, int> { [Property: LocalUser.Id (string) Required PK AfterSave:Throw, 0], [Property: LocalUser.AccessFailedCount (int) Required, 1], [Property: LocalUser.ConcurrencyStamp (string) Concurrency, 2], [Property: LocalUser.Email (string) MaxLength(256), 3], [Property: LocalUser.EmailConfirmed (bool) Required, 4], [Property: LocalUser.FirstName (string) Required, 5], [Property: LocalUser.LastName (string) Required, 6], [Property: LocalUser.LockoutEnabled (bool) Required, 7], [Property: LocalUser.LockoutEnd (DateTimeOffset?), 8], [Property: LocalUser.NormalizedEmail (string) Index MaxLength(256), 9], [Property: LocalUser.NormalizedUserName (string) Index MaxLength(256), 10], [Property: LocalUser.PasswordHash (string), 11], [Property: LocalUser.PhoneNumber (string), 12], [Property: LocalUser.PhoneNumberConfirmed (bool) Required, 13], [Property: LocalUser.SecurityStamp (string), 14], [Property: LocalUser.TwoFactorEnabled (bool) Required, 15], [Property: LocalUser.UserName (string) MaxLength(256), 16] }
                1 -> 0
                2 -> Dictionary<IProperty, int> { [Property: RefreshToken.LocalUserId (no field, string) Shadow Required PK FK AfterSave:Throw, 17], [Property: RefreshToken.Id (no field, int) Shadow Required PK AfterSave:Throw ValueGenerated.OnAdd, 18], [Property: RefreshToken.CreatedOn (DateTime) Required, 19], [Property: RefreshToken.ExpiresOn (DateTime) Required, 20], [Property: RefreshToken.RevokedOn (DateTime?), 21], [Property: RefreshToken.Token (string) Required, 22] }
                3 -> 17
                4 -> 18
            SELECT a0.Id, a0.AccessFailedCount, a0.ConcurrencyStamp, a0.Email, a0.EmailConfirmed, a0.FirstName, a0.LastName, a0.LockoutEnabled, a0.LockoutEnd, a0.NormalizedEmail, a0.NormalizedUserName, a0.PasswordHash, a0.PhoneNumber, a0.PhoneNumberConfirmed, a0.SecurityStamp, a0.TwoFactorEnabled, a0.UserName, r0.LocalUserId, r0.Id, r0.CreatedOn, r0.ExpiresOn, r0.RevokedOn, r0.Token
            FROM 
            (
                SELECT TOP(2) a.Id, a.AccessFailedCount, a.ConcurrencyStamp, a.Email, a.EmailConfirmed, a.FirstName, a.LastName, a.LockoutEnabled, a.LockoutEnd, a.NormalizedEmail, a.NormalizedUserName, a.PasswordHash, a.PhoneNumber, a.PhoneNumberConfirmed, a.SecurityStamp, a.TwoFactorEnabled, a.UserName
                FROM AspNetUsers AS a
                WHERE EXISTS (
                    SELECT 1
                    FROM RefreshToken AS r
                    WHERE ((a.Id != NULL) && (a.Id == r.LocalUserId)) && (r.Token == @__token_0))
            ) AS a0
            LEFT JOIN RefreshToken AS r0 ON a0.Id == r0.LocalUserId
            ORDER BY a0.Id ASC, r0.LocalUserId ASC, 
            False, 
            new HashSet<string>(
                new string[]{ }, 
                StringComparer.Ordinal
            )
        )].GetRelationalCommandTemplate(parameters), 
        readerColumns: null, 
        shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
        {
            resultContext.Values == null ? 
            {
                LocalUser entity;
                entity = 
                {
                    MaterializationContext materializationContext1;
                    IEntityType entityType1;
                    LocalUser instance1;
                    InternalEntityEntry entry1;
                    bool hasNullKey1;
                    materializationContext1 = new MaterializationContext(
                        [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                        queryContext.Context
                    );
                    instance1 = default(LocalUser);
                    entry1 = queryContext.TryGetEntry(
                        key: [LIFTABLE Constant: Key: LocalUser.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindPrimaryKey()], 
                        keyValues: new object[]{ (object)dataReader.GetString(0) }, 
                        throwOnNullKey: True, 
                        hasNullKey: hasNullKey1);
                    !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
                    {
                        entityType1 = entry1.EntityType;
                        return instance1 = (LocalUser)entry1.Entity;
                    } : 
                    {
                        ISnapshot shadowSnapshot1;
                        shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                        entityType1 = [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")];
                        instance1 = switch (entityType1)
                        {
                            case [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]: 
                                {
                                    return 
                                    {
                                        LocalUser instance;
                                        instance = new LocalUser();
                                        instance.<Id>k__BackingField = dataReader.GetString(0);
                                        instance.<AccessFailedCount>k__BackingField = dataReader.GetInt32(1);
                                        instance.<ConcurrencyStamp>k__BackingField = dataReader.IsDBNull(2) ? default(string) : dataReader.GetString(2);
                                        instance.<Email>k__BackingField = dataReader.IsDBNull(3) ? default(string) : dataReader.GetString(3);
                                        instance.<EmailConfirmed>k__BackingField = dataReader.GetBoolean(4);
                                        instance.<FirstName>k__BackingField = dataReader.GetString(5);
                                        instance.<LastName>k__BackingField = dataReader.GetString(6);
                                        instance.<LockoutEnabled>k__BackingField = dataReader.GetBoolean(7);
                                        instance.<LockoutEnd>k__BackingField = dataReader.IsDBNull(8) ? default(DateTimeOffset?) : (DateTimeOffset?)dataReader.GetFieldValue<DateTimeOffset>(8);
                                        instance.<NormalizedEmail>k__BackingField = dataReader.IsDBNull(9) ? default(string) : dataReader.GetString(9);
                                        instance.<NormalizedUserName>k__BackingField = dataReader.IsDBNull(10) ? default(string) : dataReader.GetString(10);
                                        instance.<PasswordHash>k__BackingField = dataReader.IsDBNull(11) ? default(string) : dataReader.GetString(11);
                                        instance.<PhoneNumber>k__BackingField = dataReader.IsDBNull(12) ? default(string) : dataReader.GetString(12);
                                        instance.<PhoneNumberConfirmed>k__BackingField = dataReader.GetBoolean(13);
                                        instance.<SecurityStamp>k__BackingField = dataReader.IsDBNull(14) ? default(string) : dataReader.GetString(14);
                                        instance.<TwoFactorEnabled>k__BackingField = dataReader.GetBoolean(15);
                                        instance.<UserName>k__BackingField = dataReader.IsDBNull(16) ? default(string) : dataReader.GetString(16);
                                        (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                            context: materializationContext1.Context, 
                                            entity: instance, 
                                            queryTrackingBehavior: TrackAll, 
                                            structuralType: [LIFTABLE Constant: EntityType: LocalUser | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser")]) : default(void);
                                        return instance;
                                    }}
                            default: 
                                default(LocalUser)
                        }
                        ;
                        entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                            entityType: entityType1, 
                            entity: instance1, 
                            snapshot: shadowSnapshot1);
                        return instance1;
                    } : default(void);
                    return instance1;
                };
                resultContext.Values = new object[]{ entity };
                ShaperProcessingExpressionVisitor.InitializeIncludeCollection<LocalUser, LocalUser>(
                    collectionId: 0, 
                    queryContext: queryContext, 
                    dbDataReader: dataReader, 
                    resultCoordinator: resultCoordinator, 
                    entity: (LocalUser)(resultContext.Values[0]), 
                    parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                    navigation: [LIFTABLE Constant: Navigation: LocalUser.RefreshTokens (List<RefreshToken>) Collection ToDependent RefreshToken | Resolver: namelessParameter{3} => namelessParameter{3}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens")], 
                    clrCollectionAccessor: [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{4} => namelessParameter{4}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()], 
                    trackingQuery: True, 
                    setLoaded: True);
            } : default(void);
            ShaperProcessingExpressionVisitor.PopulateIncludeCollection<LocalUser, RefreshToken>(
                collectionId: 0, 
                queryContext: queryContext, 
                dbDataReader: dataReader, 
                resultCoordinator: resultCoordinator, 
                parentIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                outerIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]{ dataReader.GetString(0) }], 
                selfIdentifier: [LIFTABLE Constant: Func<QueryContext, DbDataReader, object[]> | Resolver: _ => (queryContext, dataReader) => new object[]
                { 
                    dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                    (object)dataReader.IsDBNull(18) ? default(int?) : (int?)dataReader.GetInt32(18) 
                }], 
                parentIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                outerIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]{ (left, right) => left == null ? right == null : right != null && (string)left == (string)right }], 
                selfIdentifierValueComparers: [LIFTABLE Constant: Func<object, object, bool>[] { Func<object, object, bool>, Func<object, object, bool> } | Resolver: _ => new Func<object, object, bool>[]
                { 
                    (left, right) => left == null ? right == null : right != null && (string)left == (string)right, 
                    (left, right) => left == null ? right == null : right != null && (int)left == (int)right 
                }], 
                innerShaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
                {
                    RefreshToken entity;
                    entity = 
                    {
                        MaterializationContext materializationContext2;
                        IEntityType entityType2;
                        RefreshToken instance2;
                        InternalEntityEntry entry2;
                        bool hasNullKey2;
                        materializationContext2 = new MaterializationContext(
                            [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                            queryContext.Context
                        );
                        instance2 = default(RefreshToken);
                        entry2 = queryContext.TryGetEntry(
                            key: [LIFTABLE Constant: Key: RefreshToken.LocalUserId, RefreshToken.Id PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken").FindPrimaryKey()], 
                            keyValues: new object[]
                            { 
                                dataReader.IsDBNull(17) ? default(object) : (object)dataReader.GetString(17), 
                                dataReader.IsDBNull(18) ? default(object) : (object)dataReader.GetInt32(18) 
                            }, 
                            throwOnNullKey: False, 
                            hasNullKey: hasNullKey2);
                        !(hasNullKey2) ? entry2 != default(InternalEntityEntry) ? 
                        {
                            entityType2 = entry2.EntityType;
                            return instance2 = (RefreshToken)entry2.Entity;
                        } : 
                        {
                            ISnapshot shadowSnapshot2;
                            shadowSnapshot2 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                            entityType2 = [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{5} => namelessParameter{5}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")];
                            instance2 = switch (entityType2)
                            {
                                case [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{6} => namelessParameter{6}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]: 
                                    {
                                        shadowSnapshot2 = (ISnapshot)new Snapshot<string, int>(
                                            dataReader.IsDBNull(17) ? default(string) : dataReader.GetString(17), 
                                            dataReader.IsDBNull(18) ? default(int) : dataReader.GetInt32(18)
                                        );
                                        return 
                                        {
                                            RefreshToken instance;
                                            instance = new RefreshToken();
                                            instance.<CreatedOn>k__BackingField = dataReader.IsDBNull(19) ? default(DateTime) : dataReader.GetDateTime(19);
                                            instance.<ExpiresOn>k__BackingField = dataReader.IsDBNull(20) ? default(DateTime) : dataReader.GetDateTime(20);
                                            instance.<RevokedOn>k__BackingField = dataReader.IsDBNull(21) ? default(DateTime?) : (DateTime?)dataReader.GetDateTime(21);
                                            instance.<Token>k__BackingField = dataReader.IsDBNull(22) ? default(string) : dataReader.GetString(22);
                                            (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                                context: materializationContext2.Context, 
                                                entity: instance, 
                                                queryTrackingBehavior: TrackAll, 
                                                structuralType: [LIFTABLE Constant: EntityType: RefreshToken Owned | Resolver: namelessParameter{7} => namelessParameter{7}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Helpers.RefreshToken")]) : default(void);
                                            return instance;
                                        }}
                                default: 
                                    default(RefreshToken)
                            }
                            ;
                            entry2 = entityType2 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                                entityType: entityType2, 
                                entity: instance2, 
                                snapshot: shadowSnapshot2);
                            return instance2;
                        } : default(void);
                        return instance2;
                    };
                    return entity;
                }, 
                inverseNavigation: default(INavigationBase), 
                fixup: (namelessParameter{8}, namelessParameter{9}) => 
                {
                    return [LIFTABLE Constant: ClrICollectionAccessor<LocalUser, List<RefreshToken>, RefreshToken> | Resolver: namelessParameter{10} => namelessParameter{10}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.LocalUser").FindNavigation("RefreshTokens").GetCollectionAccessor()].Add(
                        entity: namelessParameter{8}, 
                        value: namelessParameter{9}, 
                        forMaterialization: True);
                }, 
                trackingQuery: True);
            return IsTrue(resultCoordinator.ResultReady)
             ? (LocalUser)(resultContext.Values[0]) : default(LocalUser);
        }, 
        contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
        standAloneStateManager: False, 
        detailedErrorsEnabled: False, 
        threadSafetyChecksEnabled: True), 
    cancellationToken: queryContext.CancellationToken)'
2025-02-13 22:34:08.035 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:34:08.036 -05:00 [DBG] Created DbConnection. (0ms).
2025-02-13 22:34:08.037 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:08.038 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:08.039 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:34:08.040 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-02-13 22:34:08.041 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:34:08.043 -05:00 [DBG] Executing DbCommand [Parameters=[@__token_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r0."LocalUserId", r0."Id", r0."CreatedOn", r0."ExpiresOn", r0."RevokedOn", r0."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE EXISTS (
        SELECT 1
        FROM "RefreshToken" AS r
        WHERE a."Id" = r."LocalUserId" AND r."Token" = @__token_0)
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r0 ON a0."Id" = r0."LocalUserId"
ORDER BY a0."Id", r0."LocalUserId"
2025-02-13 22:34:08.051 -05:00 [INF] Executed DbCommand (8ms) [Parameters=[@__token_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r0."LocalUserId", r0."Id", r0."CreatedOn", r0."ExpiresOn", r0."RevokedOn", r0."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE EXISTS (
        SELECT 1
        FROM "RefreshToken" AS r
        WHERE a."Id" = r."LocalUserId" AND r."Token" = @__token_0)
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r0 ON a0."Id" = r0."LocalUserId"
ORDER BY a0."Id", r0."LocalUserId"
2025-02-13 22:34:08.060 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:08.062 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:34:08.063 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:08.066 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:34:08.146 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API) in 231.7887ms
2025-02-13 22:34:08.148 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API)'
2025-02-13 22:34:08.291 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:34:08.297 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:08.300 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:34:08.302 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/Token/revokeToken - 400 null application/json 520.9791ms
2025-02-13 22:34:39.137 -05:00 [INF] Request starting HTTP/2 POST https://localhost:7294/api/Token/revokeToken - application/json 578
2025-02-13 22:34:39.144 -05:00 [DBG] 1 candidate(s) found for the request path '/api/Token/revokeToken'
2025-02-13 22:34:39.148 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API)' with route pattern 'api/Token/revokeToken' is valid for the request path '/api/Token/revokeToken'
2025-02-13 22:34:39.151 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API)'
2025-02-13 22:34:39.159 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:34:39.160 -05:00 [INF] No CORS policy found for the specified request.
2025-02-13 22:34:39.163 -05:00 [DBG] Successfully validated the token.
2025-02-13 22:34:39.165 -05:00 [DBG] AuthenticationScheme: Bearer was successfully authenticated.
2025-02-13 22:34:39.166 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API)'
2025-02-13 22:34:39.171 -05:00 [INF] Route matched with {action = "RevokeToken", controller = "Token"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.IActionResult] RevokeToken(HotelBookingPlatform.Domain.Helpers.RevokeToken) on controller HotelBookingPlatform.API.Controllers.TokenController (HotelBookingPlatform.API).
2025-02-13 22:34:39.174 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:34:39.176 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:34:39.177 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:34:39.180 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:34:39.181 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:34:39.183 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.TokenController (HotelBookingPlatform.API)
2025-02-13 22:34:39.188 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.TokenController (HotelBookingPlatform.API)
2025-02-13 22:34:39.189 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken' ...
2025-02-13 22:34:39.191 -05:00 [DBG] Attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken' using the name '' in request data ...
2025-02-13 22:34:39.193 -05:00 [DBG] Selected input formatter 'Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter' for content type 'application/json'.
2025-02-13 22:34:39.194 -05:00 [DBG] Connection id "0HNACL08HMD8B", Request id "0HNACL08HMD8B:00000011": started reading request body.
2025-02-13 22:34:39.196 -05:00 [DBG] Connection id "0HNACL08HMD8B", Request id "0HNACL08HMD8B:00000011": done reading request body.
2025-02-13 22:34:39.198 -05:00 [DBG] JSON input formatter succeeded, deserializing to type 'HotelBookingPlatform.Domain.Helpers.RevokeToken'
2025-02-13 22:34:39.199 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken'.
2025-02-13 22:34:39.200 -05:00 [DBG] Done attempting to bind parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken'.
2025-02-13 22:34:39.203 -05:00 [DBG] Attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken' ...
2025-02-13 22:34:39.205 -05:00 [DBG] Done attempting to validate the bound parameter 'model' of type 'HotelBookingPlatform.Domain.Helpers.RevokeToken'.
2025-02-13 22:34:39.207 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:34:39.209 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:34:39.210 -05:00 [DBG] Created DbConnection. (0ms).
2025-02-13 22:34:39.211 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:39.212 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:39.213 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:34:39.214 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (0ms).
2025-02-13 22:34:39.216 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:34:39.217 -05:00 [DBG] Executing DbCommand [Parameters=[@__token_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r0."LocalUserId", r0."Id", r0."CreatedOn", r0."ExpiresOn", r0."RevokedOn", r0."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE EXISTS (
        SELECT 1
        FROM "RefreshToken" AS r
        WHERE a."Id" = r."LocalUserId" AND r."Token" = @__token_0)
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r0 ON a0."Id" = r0."LocalUserId"
ORDER BY a0."Id", r0."LocalUserId"
2025-02-13 22:34:39.225 -05:00 [INF] Executed DbCommand (7ms) [Parameters=[@__token_0='?'], CommandType='"Text"', CommandTimeout='30']
SELECT a0."Id", a0."AccessFailedCount", a0."ConcurrencyStamp", a0."Email", a0."EmailConfirmed", a0."FirstName", a0."LastName", a0."LockoutEnabled", a0."LockoutEnd", a0."NormalizedEmail", a0."NormalizedUserName", a0."PasswordHash", a0."PhoneNumber", a0."PhoneNumberConfirmed", a0."SecurityStamp", a0."TwoFactorEnabled", a0."UserName", r0."LocalUserId", r0."Id", r0."CreatedOn", r0."ExpiresOn", r0."RevokedOn", r0."Token"
FROM (
    SELECT a."Id", a."AccessFailedCount", a."ConcurrencyStamp", a."Email", a."EmailConfirmed", a."FirstName", a."LastName", a."LockoutEnabled", a."LockoutEnd", a."NormalizedEmail", a."NormalizedUserName", a."PasswordHash", a."PhoneNumber", a."PhoneNumberConfirmed", a."SecurityStamp", a."TwoFactorEnabled", a."UserName"
    FROM "AspNetUsers" AS a
    WHERE EXISTS (
        SELECT 1
        FROM "RefreshToken" AS r
        WHERE a."Id" = r."LocalUserId" AND r."Token" = @__token_0)
    LIMIT 2
) AS a0
LEFT JOIN "RefreshToken" AS r0 ON a0."Id" = r0."LocalUserId"
ORDER BY a0."Id", r0."LocalUserId"
2025-02-13 22:34:39.237 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:39.238 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 1ms reading results.
2025-02-13 22:34:39.240 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:39.241 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:34:39.282 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API) in 99.2062ms
2025-02-13 22:34:39.284 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.TokenController.RevokeToken (HotelBookingPlatform.API)'
2025-02-13 22:34:39.373 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:34:39.374 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:34:39.377 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:34:39.378 -05:00 [INF] Request finished HTTP/2 POST https://localhost:7294/api/Token/revokeToken - 400 null application/json 243.7251ms
2025-02-13 22:35:00.572 -05:00 [INF] Request starting HTTP/2 GET https://localhost:7294/api/HomePage/trending-destinations - null null
2025-02-13 22:35:00.593 -05:00 [DBG] 1 candidate(s) found for the request path '/api/HomePage/trending-destinations'
2025-02-13 22:35:00.595 -05:00 [DBG] Endpoint 'HotelBookingPlatform.API.Controllers.HomePageController.GetTrendingDestinations (HotelBookingPlatform.API)' with route pattern 'api/HomePage/trending-destinations' is valid for the request path '/api/HomePage/trending-destinations'
2025-02-13 22:35:00.600 -05:00 [DBG] Request matched endpoint 'HotelBookingPlatform.API.Controllers.HomePageController.GetTrendingDestinations (HotelBookingPlatform.API)'
2025-02-13 22:35:00.604 -05:00 [DBG] Static files was skipped as the request already matched an endpoint.
2025-02-13 22:35:00.607 -05:00 [DBG] Successfully validated the token.
2025-02-13 22:35:00.609 -05:00 [DBG] AuthenticationScheme: Bearer was successfully authenticated.
2025-02-13 22:35:00.611 -05:00 [INF] Executing endpoint 'HotelBookingPlatform.API.Controllers.HomePageController.GetTrendingDestinations (HotelBookingPlatform.API)'
2025-02-13 22:35:00.626 -05:00 [INF] Route matched with {action = "GetTrendingDestinations", controller = "HomePage"}. Executing controller action with signature System.Threading.Tasks.Task`1[Microsoft.AspNetCore.Mvc.ActionResult`1[System.Collections.Generic.IEnumerable`1[HotelBookingPlatform.Domain.DTOs.City.CityResponseDto]]] GetTrendingDestinations() on controller HotelBookingPlatform.API.Controllers.HomePageController (HotelBookingPlatform.API).
2025-02-13 22:35:00.629 -05:00 [DBG] Execution plan of authorization filters (in the following order): ["None"]
2025-02-13 22:35:00.633 -05:00 [DBG] Execution plan of resource filters (in the following order): ["None"]
2025-02-13 22:35:00.636 -05:00 [DBG] Execution plan of action filters (in the following order): ["Microsoft.AspNetCore.Mvc.ModelBinding.UnsupportedContentTypeFilter (Order: -3000)","Microsoft.AspNetCore.Mvc.Infrastructure.ModelStateInvalidFilter (Order: -2000)"]
2025-02-13 22:35:00.640 -05:00 [DBG] Execution plan of exception filters (in the following order): ["None"]
2025-02-13 22:35:00.642 -05:00 [DBG] Execution plan of result filters (in the following order): ["Microsoft.AspNetCore.Mvc.Infrastructure.ClientErrorResultFilter (Order: -2000)"]
2025-02-13 22:35:00.645 -05:00 [DBG] Executing controller factory for controller HotelBookingPlatform.API.Controllers.HomePageController (HotelBookingPlatform.API)
2025-02-13 22:35:00.756 -05:00 [DBG] Executed controller factory for controller HotelBookingPlatform.API.Controllers.HomePageController (HotelBookingPlatform.API)
2025-02-13 22:35:00.774 -05:00 [DBG] Entity Framework Core 9.0.2 initialized 'AppDbContext' using provider 'Npgsql.EntityFrameworkCore.PostgreSQL:9.0.3+74b858ae63efc603ffa74874e49c82eb58d43b09' with options: None
2025-02-13 22:35:00.784 -05:00 [DBG] Compiling query expression: 
'DbSet<City>()
    .OrderByDescending(c => c.VisitCount)
    .Take(__p_0)'
2025-02-13 22:35:00.811 -05:00 [DBG] Generated query execution expression: 
'queryContext => SingleQueryingEnumerable.Create<City>(
    relationalQueryContext: (RelationalQueryContext)queryContext, 
    relationalCommandResolver: parameters => [LIFTABLE Constant: RelationalCommandCache.QueryExpression(
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: City.CityID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: City.Country (string) Required, 1], [Property: City.CreatedAtUtc (DateTime) Required, 2], [Property: City.Description (string) Required, 3], [Property: City.Name (string) Required, 4], [Property: City.PostOffice (string) Required, 5], [Property: City.VisitCount (int) Required, 6] }
        SELECT TOP(@__p_0) c.CityID, c.Country, c.CreatedAtUtc, c.Description, c.Name, c.PostOffice, c.VisitCount
        FROM Cities AS c
        ORDER BY c.VisitCount DESC) | Resolver: c => new RelationalCommandCache(
        c.Dependencies.MemoryCache, 
        c.RelationalDependencies.QuerySqlGeneratorFactory, 
        c.RelationalDependencies.RelationalParameterBasedSqlProcessorFactory, 
        Projection Mapping:
            EmptyProjectionMember -> Dictionary<IProperty, int> { [Property: City.CityID (int) Required PK AfterSave:Throw ValueGenerated.OnAdd, 0], [Property: City.Country (string) Required, 1], [Property: City.CreatedAtUtc (DateTime) Required, 2], [Property: City.Description (string) Required, 3], [Property: City.Name (string) Required, 4], [Property: City.PostOffice (string) Required, 5], [Property: City.VisitCount (int) Required, 6] }
        SELECT TOP(@__p_0) c.CityID, c.Country, c.CreatedAtUtc, c.Description, c.Name, c.PostOffice, c.VisitCount
        FROM Cities AS c
        ORDER BY c.VisitCount DESC, 
        False, 
        new HashSet<string>(
            new string[]{ }, 
            StringComparer.Ordinal
        )
    )].GetRelationalCommandTemplate(parameters), 
    readerColumns: null, 
    shaper: (queryContext, dataReader, resultContext, resultCoordinator) => 
    {
        City entity;
        entity = 
        {
            MaterializationContext materializationContext1;
            IEntityType entityType1;
            City instance1;
            InternalEntityEntry entry1;
            bool hasNullKey1;
            materializationContext1 = new MaterializationContext(
                [LIFTABLE Constant: ValueBuffer | Resolver: _ => (object)ValueBuffer.Empty], 
                queryContext.Context
            );
            instance1 = default(City);
            entry1 = queryContext.TryGetEntry(
                key: [LIFTABLE Constant: Key: City.CityID PK | Resolver: c => c.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.City").FindPrimaryKey()], 
                keyValues: new object[]{ (object)dataReader.GetInt32(0) }, 
                throwOnNullKey: True, 
                hasNullKey: hasNullKey1);
            !(hasNullKey1) ? entry1 != default(InternalEntityEntry) ? 
            {
                entityType1 = entry1.EntityType;
                return instance1 = (City)entry1.Entity;
            } : 
            {
                ISnapshot shadowSnapshot1;
                shadowSnapshot1 = [LIFTABLE Constant: Snapshot | Resolver: _ => Snapshot.Empty];
                entityType1 = [LIFTABLE Constant: EntityType: City | Resolver: namelessParameter{0} => namelessParameter{0}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.City")];
                instance1 = switch (entityType1)
                {
                    case [LIFTABLE Constant: EntityType: City | Resolver: namelessParameter{1} => namelessParameter{1}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.City")]: 
                        {
                            return 
                            {
                                City instance;
                                instance = new City();
                                instance.<CityID>k__BackingField = dataReader.GetInt32(0);
                                instance.<Country>k__BackingField = dataReader.GetString(1);
                                instance.<CreatedAtUtc>k__BackingField = dataReader.GetDateTime(2);
                                instance.<Description>k__BackingField = dataReader.GetString(3);
                                instance.<Name>k__BackingField = dataReader.GetString(4);
                                instance.<PostOffice>k__BackingField = dataReader.GetString(5);
                                instance.<VisitCount>k__BackingField = dataReader.GetInt32(6);
                                (instance is IInjectableService) ? ((IInjectableService)instance).Injected(
                                    context: materializationContext1.Context, 
                                    entity: instance, 
                                    queryTrackingBehavior: TrackAll, 
                                    structuralType: [LIFTABLE Constant: EntityType: City | Resolver: namelessParameter{2} => namelessParameter{2}.Dependencies.Model.FindEntityType("HotelBookingPlatform.Domain.Entities.City")]) : default(void);
                                return instance;
                            }}
                    default: 
                        default(City)
                }
                ;
                entry1 = entityType1 == default(IEntityType) ? default(InternalEntityEntry) : queryContext.StartTracking(
                    entityType: entityType1, 
                    entity: instance1, 
                    snapshot: shadowSnapshot1);
                return instance1;
            } : default(void);
            return instance1;
        };
        return entity;
    }, 
    contextType: HotelBookingPlatform.Infrastructure.Data.AppDbContext, 
    standAloneStateManager: False, 
    detailedErrorsEnabled: False, 
    threadSafetyChecksEnabled: True)'
2025-02-13 22:35:00.823 -05:00 [DBG] Creating DbConnection.
2025-02-13 22:35:00.824 -05:00 [DBG] Created DbConnection. (1ms).
2025-02-13 22:35:00.826 -05:00 [DBG] Opening connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:35:00.828 -05:00 [DBG] Opened connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:35:00.832 -05:00 [DBG] Creating DbCommand for 'ExecuteReader'.
2025-02-13 22:35:00.834 -05:00 [DBG] Created DbCommand for 'ExecuteReader' (2ms).
2025-02-13 22:35:00.836 -05:00 [DBG] Initialized DbCommand for 'ExecuteReader' (4ms).
2025-02-13 22:35:00.838 -05:00 [DBG] Executing DbCommand [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT c."CityID", c."Country", c."CreatedAtUtc", c."Description", c."Name", c."PostOffice", c."VisitCount"
FROM "Cities" AS c
ORDER BY c."VisitCount" DESC
LIMIT @__p_0
2025-02-13 22:35:00.849 -05:00 [INF] Executed DbCommand (11ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT c."CityID", c."Country", c."CreatedAtUtc", c."Description", c."Name", c."PostOffice", c."VisitCount"
FROM "Cities" AS c
ORDER BY c."VisitCount" DESC
LIMIT @__p_0
2025-02-13 22:35:00.856 -05:00 [DBG] Closing data reader to 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:35:00.858 -05:00 [DBG] A data reader for 'lepointdb' on server 'tcp://localhost:5432' is being disposed after spending 2ms reading results.
2025-02-13 22:35:00.860 -05:00 [DBG] Closing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:35:00.862 -05:00 [DBG] Closed connection to database 'lepointdb' on server 'tcp://localhost:5432' (1ms).
2025-02-13 22:35:00.974 -05:00 [INF] Executed action HotelBookingPlatform.API.Controllers.HomePageController.GetTrendingDestinations (HotelBookingPlatform.API) in 329.3024ms
2025-02-13 22:35:00.976 -05:00 [INF] Executed endpoint 'HotelBookingPlatform.API.Controllers.HomePageController.GetTrendingDestinations (HotelBookingPlatform.API)'
2025-02-13 22:35:01.084 -05:00 [DBG] 'AppDbContext' disposed.
2025-02-13 22:35:01.085 -05:00 [DBG] Disposing connection to database 'lepointdb' on server 'tcp://localhost:5432'.
2025-02-13 22:35:01.087 -05:00 [DBG] Disposed connection to database 'lepointdb' on server 'tcp://localhost:5432' (2ms).
2025-02-13 22:35:01.089 -05:00 [INF] Request finished HTTP/2 GET https://localhost:7294/api/HomePage/trending-destinations - 404 null application/json 517.8893ms
